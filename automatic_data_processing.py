import pandas as pd
import streamlit as st

def summarize_missing(df: pd.DataFrame) -> pd.DataFrame:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏:
      - column        ‚Äî –∏–º—è –∫–æ–ª–æ–Ω–∫–∏
      - missing_count ‚Äî –∫–æ–ª-–≤–æ NaN
      - pct_missing   ‚Äî % NaN (–æ–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π)
    –¢–æ–ª—å–∫–æ –ø–æ —Ç–µ–º –∫–æ–ª–æ–Ω–∫–∞–º, –≥–¥–µ –µ—Å—Ç—å NaN.
    """
    nulls = df.isna().sum()
    stats = pd.DataFrame({
        "column":        nulls.index,
        "missing_count": nulls.values,
        "pct_missing":   (nulls / len(df) * 100).round(1).values
    })
    return stats[stats["missing_count"] > 0].reset_index(drop=True)


def is_categorical(series: pd.Series) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π."""
    return (
        series.dtype == 'object'
        or pd.api.types.is_categorical_dtype(series)
        or series.nunique() < 20  # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    )


def standard_auto_cleaning(df: pd.DataFrame, target_col: str = None):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞:
      <5% NaN       ‚Üí –¥—Ä–æ–ø —Å—Ç—Ä–æ–∫
      <20% NaN      ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (—á–∏—Å–ª. ‚Üí median, –∫–∞—Ç–µ–≥. ‚Üí mode)
      ‚â•50% NaN      ‚Üí –¥—Ä–æ–ø –∫–æ–ª–æ–Ω–∫–∏
      NaN –≤ target ‚Üí –¥—Ä–æ–ø —Å—Ç—Ä–æ–∫
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (new_df, cleaning_log), –≥–¥–µ cleaning_log ‚Äî —Å–ø–∏—Å–æ–∫ dict:
      column, missing_count, pct_missing, action
    """
    df_clean = df.copy()
    total = len(df_clean)
    log = []

    for col in df.columns:
        miss = df_clean[col].isna().sum()
        if miss == 0:
            continue

        pct = miss / total * 100
        pct_r = round(pct, 1)

        # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        if target_col and col == target_col:
            before = len(df_clean)
            df_clean.dropna(subset=[col], inplace=True)
            dropped = before - len(df_clean)
            action = f"–¥—Ä–æ–ø —Å—Ç—Ä–æ–∫ –≤ target ({dropped} —à—Ç.)"

        # <5% NaN ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
        elif pct < 5:
            before = len(df_clean)
            df_clean.dropna(subset=[col], inplace=True)
            dropped = before - len(df_clean)
            action = f"—É–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ ({dropped} —à—Ç.)"

        # <20% NaN ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º
        elif pct < 20:
            s = df_clean[col]
            if pd.api.types.is_numeric_dtype(s) and not is_categorical(s):
                val = s.median()
                df_clean[col].fillna(val, inplace=True)
                action = f"–∑–∞–ø–æ–ª–Ω–µ–Ω–æ median={val:.2f}"
            else:
                mode = s.mode()
                if not mode.empty:
                    val = mode[0]
                    df_clean[col].fillna(val, inplace=True)
                    action = f"–∑–∞–ø–æ–ª–Ω–µ–Ω–æ mode='{val}'"
                else:
                    action = "–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: mode –ø—É—Å—Ç–æ–π"

        # ‚â•50% NaN ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        elif pct >= 50:
            df_clean.drop(columns=[col], inplace=True)
            action = f"–∫–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ (‚â•50% NaN)"

        # –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        else:
            action = f"–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ({pct_r}% –ø—Ä–æ–ø—É—Å–∫–æ–≤)"

        log.append({
            "column":        col,
            "missing_count": int(miss),
            "pct_missing":   pct_r,
            "action":        action
        })

    return df_clean, log


def run_auto_cleaning(df: pd.DataFrame, target_col: str = None):
    """
    –û–±—ë—Ä—Ç–∫–∞: —Å–Ω–∞—á–∞–ª–∞ summarize_missing, –ø–æ—Ç–æ–º standard_auto_cleaning.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (stats_before, cleaning_log, new_df).
    """
    stats_before = summarize_missing(df)
    new_df, cleaning_log = standard_auto_cleaning(df, target_col)
    return stats_before, cleaning_log, new_df


import streamlit as st

def render_cleaning_principles():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤.
    """
    with st.expander("üìñ –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–¥–ª—è ¬´–£–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö¬ª)", expanded=False):
        st.markdown("#### –ö–∞–∫ –º—ã —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏")
        st.markdown("""
<table style="width:100%">
<thead>
<tr>
  <th style="text-align:left">üìä –£—Å–ª–æ–≤–∏–µ</th>
  <th style="text-align:left">üõ† –î–µ–π—Å—Ç–≤–∏–µ</th>
</tr>
</thead>
<tbody>
<tr><td>&lt; 5% –ø—Ä–æ–ø—É—Å–∫–æ–≤</td><td>–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN</td></tr>
<tr><td>5‚Äì20% –ø—Ä–æ–ø—É—Å–∫–æ–≤</td><td>–ó–∞–ø–æ–ª–Ω—è–µ–º (—á–∏—Å–ª. ‚Üí median / –∫–∞—Ç. ‚Üí mode)</td></tr>
<tr><td>20‚Äì50% –ø—Ä–æ–ø—É—Å–∫–æ–≤</td><td>–û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É</td></tr>
<tr><td>‚â• 50% –ø—Ä–æ–ø—É—Å–∫–æ–≤</td><td>–£–¥–∞–ª—è–µ–º –≤–µ—Å—å —Å—Ç–æ–ª–±–µ—Ü</td></tr>
<tr><td>–ü—Ä–æ–ø—É—Å–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `y`</td><td>–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ ‚Äî –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</td></tr>
</tbody>
</table>
""", unsafe_allow_html=True)




# ===== –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ =====

def drop_rows_na(df: pd.DataFrame, cols: list, target_col: str = None) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤ –ª—é–±—ã—Ö –∏–∑ cols –µ—Å—Ç—å NaN.
    –ù–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å NaN –≤ target_col.
    """
    df_clean = df.copy()
    subset = [c for c in cols if c in df_clean.columns]
    df_clean.dropna(subset=subset, inplace=True)
    return df_clean

def drop_cols_na(df: pd.DataFrame, cols: list) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ü–µ–ª–∏–∫–æ–º.
    """
    df_clean = df.copy()
    to_drop = [c for c in cols if c in df_clean.columns]
    df_clean.drop(columns=to_drop, inplace=True)
    return df_clean

def fill_na(
    df: pd.DataFrame,
    cols: list,
    method: str,
    constant_value=None
) -> pd.DataFrame:
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö cols:
      - mean/median –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö
      - mode –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
      - constant ‚Äî –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      - unknown ‚Äî —Å—Ç—Ä–æ–∫–æ–π 'unknown'
    """
    df_clean = df.copy()
    for col in cols:
        if col not in df_clean.columns:
            continue
        series = df_clean[col]
        if method == "mean" and pd.api.types.is_numeric_dtype(series):
            df_clean[col].fillna(series.mean(), inplace=True)
        elif method == "median" and pd.api.types.is_numeric_dtype(series):
            df_clean[col].fillna(series.median(), inplace=True)
        elif method == "mode":
            mode = series.mode()
            if not mode.empty:
                df_clean[col].fillna(mode[0], inplace=True)
        elif method == "constant":
            df_clean[col].fillna(constant_value, inplace=True)
        elif method == "unknown":
            df_clean[col].fillna("unknown", inplace=True)
    return df_clean

def summarize_missing(df: pd.DataFrame) -> pd.DataFrame:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏:
      - column, missing_count, pct_missing
    –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –∫–æ–ª–æ–Ω–æ–∫, –≥–¥–µ –µ—Å—Ç—å NaN.
    """
    nulls = df.isna().sum()
    stats = pd.DataFrame({
        "column":        nulls.index,
        "missing_count": nulls.values,
        "pct_missing":   (nulls / len(df) * 100).round(1).values
    })
    return stats[stats["missing_count"] > 0].reset_index(drop=True)


def render_nan_handling_info():
    st.markdown("### üß≠ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —Ä–∞–∑–¥–µ–ª–æ–º")
    with st.expander("‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å"):
        st.markdown("""
### –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (NaN)

–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –¥–≤–∞ –ø–æ–¥—Ö–æ–¥–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.

#### –ú–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏

- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞**  
  –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞.

- **–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞**  
  –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–ø–æ—Å–æ–± –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≥–∏–±–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.

---

#### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ

1. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –∏–º–µ–µ—Ç—Å—è).  
2. –ü—Ä–æ–ø—É—Å–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–∏–∑–Ω–∞–∫–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.  
3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.
        """)


def render_nan_rules_table():
    st.markdown("### üìã –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    st.markdown(
                "| % –ø—Ä–æ–ø—É—Å–∫–æ–≤ | –î–µ–π—Å—Ç–≤–∏–µ                               |\n"
                "|------------:|----------------------------------------|\n"
                "| < 5%        | –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏                         |\n"
                "| 5‚Äì20%       | –ó–∞–ø–æ–ª–Ω–∏—Ç—å (—á–∏—Å–ª.‚Üímedian / –∫–∞—Ç.‚Üímode)   |\n"
                "| 20‚Äì50%      | –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π                 |\n"
                "| ‚â• 50%       | –£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü                        |\n"
                "| NaN –≤ target| –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏                         |"
            )


def drop_selected_cols(df, cols):
    """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ DataFrame."""
    return df.drop(columns=cols, errors="ignore")

def show_na_summary(before: pd.DataFrame,
                    after: pd.DataFrame,
                    cols: list[str],
                    title_before="–î–æ",
                    title_after="–ü–æ—Å–ª–µ"):
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
    cnt_before = before[cols].isna().sum()
    # –¢–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ > 0
    cnt_before = cnt_before[cnt_before > 0]

    # –î–ª—è after —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ –º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å—Å—è
    common = [c for c in cols if c in after.columns]
    cnt_after = after[common].isna().sum() if common else pd.Series(dtype=int)
    cnt_after = cnt_after[cnt_after > 0]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    if cnt_before.empty:
        st.info("–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        st.markdown(f"**{title_before}**")
        st.table(cnt_before.rename("NaN").to_frame())

    if cnt_after.empty:
        st.success("–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        st.markdown(f"**{title_after}**")
        st.table(cnt_after.rename("NaN").to_frame())