# =====  ->–°–¢–† –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
import pandas as pd
import streamlit as st
import re
from typing import Callable
import chardet


from AI_helper import update_context
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö 

def looks_like_number(s: str) -> bool:
    s = s.strip().replace(",", ".")
    return bool(re.match(r"^-?\d+(\.\d+)?$", s))


def load_data(uploaded_file) -> pd.DataFrame:
    """
    –ß–∏—Ç–∞–µ—Ç CSV/XLSX/XLS, –ø—Ä–∏–≤–æ–¥–∏—Ç object-—Å—Ç–æ–ª–±—Ü—ã –∫ —á–∏—Å–ª–∞–º, 
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ st.session_state.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    st.session_state["original_filename"] = uploaded_file.name  

    fname = uploaded_file.name.lower()
    
    if fname.endswith((".xlsx", ".xls")):
        df = pd.read_excel(uploaded_file)

    elif fname.endswith(".csv"):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        raw = uploaded_file.read()
        enc = chardet.detect(raw)["encoding"] or "utf-8"
        uploaded_file.seek(0)  # –≤–µ—Ä–Ω–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

        try:
            df = pd.read_csv(
                uploaded_file,
                sep=None,              # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
                engine="python",       # –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä
                on_bad_lines="skip",   # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                encoding=enc
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")
            raise
    else:
        st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        raise ValueError

    # –õ–æ–≥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π —Ç–∏–ø–æ–≤
    conversion_log = []
    for col in df.columns:
        dtype = df[col].dtype
        if dtype == "object":
            df[col] = df[col].astype(str).str.strip().str.replace(",", ".")
            mask = df[col].apply(looks_like_number)
            rate = mask.mean()
            if rate > 0.9:
                try:
                    df[col] = pd.to_numeric(df[col], errors="raise")
                    conversion_log.append(f"{col}: object ‚Üí float ({rate:.0%})")
                except Exception:
                    conversion_log.append(f"{col}: –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            else:
                conversion_log.append(f"{col}: —Ç–µ–∫—Å—Ç ({rate:.0%} —á–∏—Å–µ–ª)")
        else:
            conversion_log.append(f"{col}: {dtype}")

    st.session_state["conversion_log"] = conversion_log
    return df


def get_base_info(df: pd.DataFrame) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ DataFrame."""
    return {
        "–°—Ç—Ä–æ–∫": df.shape[0],
        "–°—Ç–æ–ª–±—Ü–æ–≤": df.shape[1],
        "–ü—Ä–æ–ø—É—Å–∫–æ–≤": int(df.isnull().sum().sum()),
        "–î—É–±–ª–∏–∫–∞—Ç–æ–≤": int(df.duplicated().sum()),
        "–ß–∏—Å–ª–æ–≤—ã—Ö": len(df.select_dtypes("number").columns),
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö": len(df.select_dtypes("object").columns),
    }


def display_preview(df: pd.DataFrame, n: int = 5):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ n —Å—Ç—Ä–æ–∫ –∏ —Å–∫—Ä—ã—Ç—É—é –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏."""
    st.markdown(f"### üßæ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ {n} —Å—Ç—Ä–æ–∫):")
    st.dataframe(df.head(n), use_container_width=True)

    with st.expander("üìë –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (describe)", expanded=False):
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É describe
        desc = df.describe(include="all").round(3).transpose()
        desc.index.name = "–ü—Ä–∏–∑–Ω–∞–∫"
        st.dataframe(desc, use_container_width=True)

        # –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—è–º
        st.markdown(
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —è—á–µ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (None) ‚Äî\n"
            "- –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–ª—è `unique`, `top` –∏ `freq` –Ω–µ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è;\n"
            "- –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç `min`, `25%`, `50%`, `75%`, `max`, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º—ã.\n"
            "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö."
        )


def display_base_info(base_info: dict):
    """–ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ DataFrame."""
    st.subheader("üìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    cols = st.columns(len(base_info))
    for col, (label, value) in zip(cols, base_info.items()):
        col.metric(label=label, value=value)


def interpret_with_ai(
    data_summary: str,
    user_desc: str,
    df: pd.DataFrame,
    get_ai_fn: Callable[[str], str]
) -> None:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π prompt –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–≤–æ–¥–∫–∏, —Ü–µ–ª–µ–π –∏ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ò–ò –∏ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.
    """
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ò–ò
    update_context("data_summary", data_summary)
    update_context("user_goal", user_desc)

    # 2. –°–æ–±–∏—Ä–∞–µ–º ¬´–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫¬ª –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø—É—Å–∫–æ–≤
    sample_csv = df.head(5).to_csv(index=False)
    missing = df.isna().sum().to_dict()

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π prompt
    prompt = (
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"{data_summary}\n\n"
        f"–ü—Ä–æ–ø—É—Å–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º: {missing}\n\n"
        f"–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ (CSV):\n{sample_csv}\n\n"
        f"–¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞: {user_desc}\n\n"
        "–ü—Ä–æ—Å—Ç–æ —ç—Ç–æ —É—á–∏—Ç–æ–≤–∞–π, –Ω–∞ –≤—Å—è–∫–∏–µ —Å–ª—É—á–∏\n"
        "–û—Ç–≤–µ—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã –Ω–µ —Å–∫—É—á–Ω–æ –±—ã–ª–æ —á–∏—Ç–∞—å, –∏ –Ω–µ –¥–ª–∏–Ω–Ω–æ!" \
        "–ö–æ–Ω—Å–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —á—Ç–æ —á—Ç–æ –ø—Ä–æ—Å—è—Ç!"
    )

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    try:
        with st.spinner("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç –ò–ò..."):
            ai_response = get_ai_fn(prompt)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò: {e}", icon="üö´")
        return ai_response

    # 5. –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    st.markdown("---")
    st.subheader("üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –æ—Ç –ò–ò")
    st.info(ai_response, icon="ü§ñ")