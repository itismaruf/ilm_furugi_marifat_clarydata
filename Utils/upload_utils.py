import pandas as pd
import streamlit as st
import re

def looks_like_number(s: str) -> bool:
    s = s.strip().replace(",", ".")
    return bool(re.match(r"^-?\d+(\.\d+)?$", s))

def load_data(uploaded_file) -> pd.DataFrame:
    st.session_state["original_filename"] = uploaded_file.name  
    fname = uploaded_file.name.lower()
    if fname.endswith((".xlsx", ".xls")):
        df = pd.read_excel(uploaded_file)
    elif fname.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        raise ValueError

    conversion_log = []
    for col in df.columns:
        dtype = df[col].dtype
        if dtype == "object":
            df[col] = df[col].astype(str).str.strip().str.replace(",", ".")
            mask = df[col].apply(looks_like_number)
            rate = mask.mean()
            if rate > 0.9:
                try:
                    df[col] = pd.to_numeric(df[col], errors="raise")
                    conversion_log.append(f"{col}: object ‚Üí float ({rate:.0%})")
                except:
                    conversion_log.append(f"{col}: –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            else:
                conversion_log.append(f"{col}: —Ç–µ–∫—Å—Ç ({rate:.0%} —á–∏—Å–µ–ª)")
        else:
            conversion_log.append(f"{col}: {dtype}")

    st.session_state["conversion_log"] = conversion_log
    return df

def get_base_info(df: pd.DataFrame) -> dict:
    return {
        "–°—Ç—Ä–æ–∫": df.shape[0],
        "–°—Ç–æ–ª–±—Ü–æ–≤": df.shape[1],
        "–ü—Ä–æ–ø—É—Å–∫–æ–≤": int(df.isnull().sum().sum()),
        "–î—É–±–ª–∏–∫–∞—Ç–æ–≤": int(df.duplicated().sum()),
        "–ß–∏—Å–ª–æ–≤—ã—Ö": len(df.select_dtypes("number").columns),
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö": len(df.select_dtypes("object").columns),
    }

def show_data_head(df: pd.DataFrame, n: int = 5):
    st.markdown(f"### üßæ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ {n} —Å—Ç—Ä–æ–∫):")
    st.dataframe(df.head(n), use_container_width=True)

def show_descriptive_stats(df: pd.DataFrame):
    st.markdown("### üìë –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (describe)")
    desc = df.describe(include="all").round(3).transpose()
    desc.index.name = "–ü—Ä–∏–∑–Ω–∞–∫"
    st.dataframe(desc, use_container_width=True)
    st.markdown(
        "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —è—á–µ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (None) ‚Äî\n"
        "- –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–ª—è `unique`, `top` –∏ `freq` –Ω–µ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è;\n"
        "- –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç `min`, `25%`, `50%`, `75%`, `max`, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º—ã.\n"
        "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    )

def display_base_info(base_info: dict):
    st.subheader("üìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    cols = st.columns(len(base_info))
    for col, (label, value) in zip(cols, base_info.items()):
        col.metric(label=label, value=value)