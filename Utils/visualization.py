import streamlit as st
import pandas as pd
import plotly.express as px
from typing import Optional, Tuple, Dict
from AI_helper import get_chatgpt_response
import time


# eda_ui_blocks.py
# === –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ===
def apply_numeric_filters(
    df: pd.DataFrame,
    numeric_filters: Optional[Dict[str, Tuple[float, float]]]
) -> pd.DataFrame:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º."""
    if not numeric_filters:
        return df
    try:
        for col, (min_val, max_val) in numeric_filters.items():
            if col not in df or not pd.api.types.is_numeric_dtype(df[col]):
                continue
            if min_val != max_val:
                df = df[df[col].between(min_val, max_val)]
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    return df

def is_temporal(column_name: str, series: pd.Series) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π."""
    if pd.api.types.is_datetime64_any_dtype(series):
        return True
    keywords = ["date", "time", "year", "month"]
    return any(key in column_name.lower() for key in keywords)

# === –ê–≤—Ç–æ- –∏ —Ä—É—á–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
def generate_manual_chart(
    df: pd.DataFrame,
    x: str,
    y: Optional[str] = None,
    chart_type: str = "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞"
):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    try:
        if x not in df.columns or (y and y not in df.columns):
            return None
        x_num = pd.api.types.is_numeric_dtype(df[x])
        y_num = pd.api.types.is_numeric_dtype(df[y]) if y else False
        is_time_x = is_temporal(x, df[x])

        if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            return px.histogram(df, x=x, nbins=30 if x_num else None)
        elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            counts = df[x].value_counts()
            return px.pie(names=counts.index, values=counts.values)
        elif chart_type == "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫" and y:
            return px.scatter(df, x=x, y=y)
        elif chart_type == "Boxplot" and y:
            return px.box(df, x=x, y=y)
        elif chart_type == "Bar-–≥—Ä–∞—Ñ–∏–∫" and y:
            return px.bar(df, x=x, y=y)
        elif chart_type == "–õ–∞–π–Ω–ø–ª–æ—Ç" and y and is_time_x:
            return px.line(df, x=x, y=y)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    return None

def generate_auto_chart(
    df: pd.DataFrame,
    x: str,
    y: Optional[str] = None
):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞."""
    try:
        if x not in df.columns or (y and y not in df.columns):
            return None
        x_num = pd.api.types.is_numeric_dtype(df[x])
        y_num = pd.api.types.is_numeric_dtype(df[y]) if y else False
        is_time_x = is_temporal(x, df[x])

        if y:
            if x_num and y_num:
                return px.line(df, x=x, y=y) if is_time_x else px.scatter(df, x=x, y=y)
            if not x_num and y_num:
                return px.bar(df.groupby(x)[y].mean().reset_index(), x=x, y=y)
            if not x_num and not y_num:
                return px.histogram(df, x=x, color=y, barmode="group")
            return px.bar(df, x=x, y=y)
        else:
            if x_num:
                return px.histogram(df, x=x)
            counts = df[x].value_counts()
            return px.pie(names=counts.index, values=counts.values)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    return None

def plot_data_visualizations(df, x, y=None, numeric_filters=None, chart_type="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"):
    if x not in df.columns or (y and y not in df.columns) or (x == y and y is not None):
        st.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.")
        return None

    df_filtered = apply_numeric_filters(df, numeric_filters or {})

    if df_filtered.empty:
        st.info("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
        return None

    fig = None
    if chart_type == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏":
        fig = generate_auto_chart(df_filtered, x, y)
    else:
        fig = generate_manual_chart(df_filtered, x, y, chart_type)

    if fig is None:
        st.info("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
    return fig


# === –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò ===
def suggest_visualization_combinations(df_info: str) -> str:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º."""
    try:
        prompt = (
            "–ü—Ä–µ–¥–ª–æ–∂–∏ 2‚Äì3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (X –∏ Y) "
            "–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏, —á—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å."
        )
        return get_chatgpt_response(prompt)
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}"

# === –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ===
def plot_correlation_heatmap(df: pd.DataFrame):
    """–°—Ç—Ä–æ–∏—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π."""
    numeric_df = df.select_dtypes(include='number')
    if numeric_df.shape[1] < 2:
        return None
    corr = numeric_df.corr().round(2)
    return px.imshow(
        corr,
        text_auto=True,
        color_continuous_scale='RdBu_r',
        title="üîó –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"
    )

# === Pivot ===
def generate_pivot_table(df: pd.DataFrame, index_col: str, value_col: str, agg_func: str = "mean"):
    """–°—Ç—Ä–æ–∏—Ç —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ index_col —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º value_col."""
    if index_col not in df.columns or value_col not in df.columns:
        return None

    if agg_func not in {"mean", "sum", "count"}:
        return None

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å as_index=False, —á—Ç–æ–±—ã index_col –æ—Å—Ç–∞–ª—Å—è –∫–æ–ª–æ–Ω–∫–æ–π
    grouped = df.groupby(index_col, as_index=False)[value_col]

    if agg_func == "mean":
        pivot = grouped.mean()
    elif agg_func == "sum":
        pivot = grouped.sum()
    elif agg_func == "count":
        pivot = grouped.count()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ 2 –∫–æ–ª–æ–Ω–∫–∏
    if pivot.shape[1] == 2:
        pivot.columns = [index_col, f"{agg_func}({value_col})"]
        return pivot
    else:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        return pivot
    


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ)
from AI_helper import send_correlation_to_ai, send_pivot_to_ai


def show_chart_tab(df: pd.DataFrame) -> None:
    """–í–∫–ª–∞–¥–∫–∞: –≤—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞, —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞."""
    st.subheader("üß≠ –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")

    # X –∏ Y –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    col1, col2 = st.columns(2)
    with col1:
        x = st.selectbox(
            "üü• –û—Å—å X",
            df.columns,
            index=st.session_state.get("eda_x_index", 0),
            key="eda_x",
        )
    with col2:
        y_options = [""] + list(df.columns)
        y = (
            st.selectbox(
                "üü¶ –û—Å—å Y (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                y_options,
                index=st.session_state.get("eda_y_index", 0),
                key="eda_y",
            )
            or None
        )

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±–æ—Ä–∞ –≤ session_state
    st.session_state["eda_x_index"] = list(df.columns).index(x)
    st.session_state["eda_y_index"] = y_options.index(y if y else "")

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è X –∏ Y
    if x == y and y is not None:
        st.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ X –∏ Y –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.")
        y = None

    st.markdown("---")

    # –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä ‚Äî –∫–∞–∫ —É —Ç–µ–±—è)
    with st.expander("üé® –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", expanded=True):
        chart_options = [
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞",
            "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
            "Boxplot",
            "Bar-–≥—Ä–∞—Ñ–∏–∫",
            "–õ–∞–π–Ω–ø–ª–æ—Ç",
        ]
        chart_type = st.selectbox(
            label="",
            options=chart_options,
            index=st.session_state.get("eda_chart_index", 0),
            key="eda_chart",
        )
        st.session_state["eda_chart_index"] = chart_options.index(chart_type)

        st.caption("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        build_chart = st.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", key="build_chart")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    st.markdown("---")

    # –ì—Ä–∞—Ñ–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    with st.expander("üìà –ì—Ä–∞—Ñ–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", expanded=True):
        filters = {}
        cols_to_filter = [x] + ([y] if y else [])
        # dict.fromkeys ‚Äî —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏ —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏, –µ—Å–ª–∏ X==Y
        for col in dict.fromkeys(cols_to_filter):
            if col and pd.api.types.is_numeric_dtype(df[col]):
                lo, hi = float(df[col].min()), float(df[col].max())
                if lo != hi:
                    sel = st.slider(
                        f"–§–∏–ª—å—Ç—Ä –ø–æ {col}",
                        min_value=lo,
                        max_value=hi,
                        value=st.session_state.get(f"slider_{col}", (lo, hi)),
                        key=f"slider_{col}",
                    )
                    filters[col] = sel

        if build_chart:
            with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞..."):
                time.sleep(2.5)  # –∫–∞–∫ —É —Ç–µ–±—è ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                fig = plot_data_visualizations(
                    df=df,
                    x=x,
                    y=y,
                    numeric_filters=filters,
                    chart_type=chart_type,
                )
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        else:
            st.info("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫¬ª.")
            

def show_ai_suggestions(df: pd.DataFrame) -> None:
    """–ë–ª–æ–∫ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –æ—Ç –ò–ò –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º (–≤—ã–Ω–µ—Å–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)."""
    with st.expander("üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç –ò–ò"):
        if st.button("‚ú® –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏", key="suggest_combinations"):
            df_info = f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(df.columns)}"
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
                time.sleep(2)
                st.session_state["eda_suggestion"] = suggest_visualization_combinations(df_info)

        if "eda_suggestion" in st.session_state:
            st.markdown("**üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:**")
            st.info(st.session_state["eda_suggestion"], icon="ü§ñ")


def show_correlation_tab(df: pd.DataFrame) -> None:
    """–í–∫–ª–∞–¥–∫–∞: —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è –≤ –ò–ò."""
    st.subheader("‚ùÑÔ∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
    fig = plot_correlation_heatmap(df)
    if fig:
        st.plotly_chart(fig, use_container_width=True)
        st.info("üí° –ß–µ–º –±–ª–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ 1 –∏–ª–∏ -1, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ª–∏–Ω–µ–π–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.")

        if st.button("üì§ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –ò–ò", key="fix_corr"):
            try:
                _ = send_correlation_to_ai(df)
                st.session_state["correlation_saved"] = True
                st.success("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ –ò–ò.")
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –ò–ò: {e}")
        elif st.session_state.get("correlation_saved"):
            st.info("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —É–∂–µ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        st.info("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É.")


def show_pivot_tab(df: pd.DataFrame) -> None:
    """–í–∫–ª–∞–¥–∫–∞: —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (pivot) –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ò–ò."""
    st.subheader("üìä –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (Pivot)")

    col1, col2 = st.columns(2)
    with col1:
        index_col = st.selectbox(
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
            df.columns,
            index=st.session_state.get("pivot_index_index", 0),
            key="pivot_index",
        )
        st.session_state["pivot_index_index"] = list(df.columns).index(index_col)

    with col2:
        num_cols = df.select_dtypes(include="number").columns
        if len(num_cols) == 0:
            st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.")
            return
        value_col = st.selectbox(
            "–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å",
            num_cols,
            index=st.session_state.get("pivot_value_index", 0),
            key="pivot_value",
        )
        st.session_state["pivot_value_index"] = list(num_cols).index(value_col)

    agg_options = ["mean", "sum", "count"]
    agg_func = st.radio(
        "–ú–µ—Ç–æ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
        agg_options,
        index=st.session_state.get("pivot_agg_index", 0),
        horizontal=True,
        key="pivot_agg",
    )
    st.session_state["pivot_agg_index"] = agg_options.index(agg_func)

    pivot_table = generate_pivot_table(df, index_col, value_col, agg_func)
    if pivot_table is not None:
        st.dataframe(pivot_table, use_container_width=True)

        if st.button("üì§ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –ò–ò", key="fix_pivot"):
            try:
                _ = send_pivot_to_ai(pivot_table, index_col, value_col, agg_func)
                st.session_state["pivot_saved"] = True
                st.success("‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ò–ò.")
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ò–ò: {e}")
        elif st.session_state.get("pivot_saved"):
            st.info("‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        st.info("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Å—Ç–æ–ª–±—Ü—ã!")