import streamlit as st
import pandas as pd
import plotly.express as px
from scipy.stats import ttest_ind, ttest_rel, f_oneway, chi2_contingency

# ==== –£—Ç–∏–ª–∏—Ç—ã ====
def is_numeric(series):
    return pd.api.types.is_numeric_dtype(series)

def is_categorical(series):
    return pd.api.types.is_object_dtype(series) or pd.api.types.is_categorical_dtype(series)

# ==== –ù–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ====
def group_summary(df, num_col, cat_col):
    summary = (
        df.groupby(cat_col)[num_col]
        .agg(['mean', 'std', 'count'])
        .reset_index()
        .rename(columns={
            'mean': '–°—Ä–µ–¥–Ω–µ–µ',
            'std': 'SD',
            'count': 'N',
            cat_col: '–ì—Ä—É–ø–ø–∞'
        })
    )
    summary['SE'] = summary['SD'] / summary['N']**0.5
    return summary

def display_test_result(test_name, stat_label, stat_value, p_value, alpha=0.05):
    if p_value < alpha:
        st.success(f"‚úÖ {test_name}: —Ä–∞–∑–ª–∏—á–∏—è –∑–Ω–∞—á–∏–º—ã (p = {p_value:.4f})")
    else:
        st.info(f"‚ÑπÔ∏è {test_name}: —Ä–∞–∑–ª–∏—á–∏—è –Ω–µ–∑–Ω–∞—á–∏–º—ã (p = {p_value:.4f})")
    st.metric(label=stat_label, value=f"{stat_value:.4f}")
    st.metric(label="p‚Äëvalue", value=f"{p_value:.4f}")

def plot_group_means(summary_df, title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"):
    fig = px.bar(
        summary_df,
        x="–ì—Ä—É–ø–ø–∞",
        y="–°—Ä–µ–¥–Ω–µ–µ",
        error_y="SE",
        text="–°—Ä–µ–¥–Ω–µ–µ",
        color="–ì—Ä—É–ø–ø–∞",
        title=title
    )
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    st.plotly_chart(fig, use_container_width=True)

def display_summary_table(summary_df):
    st.dataframe(
        summary_df.style.format({
            "–°—Ä–µ–¥–Ω–µ–µ": "{:.2f}",
            "SD": "{:.2f}",
            "SE": "{:.2f}",
            "N": "{:d}"
        })
    )

# ==== Chi2 –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ====
def plot_chi2_table(table, plot_choice="–ê–≤—Ç–æ"):
    n_levels_x = table.shape[1]
    n_levels_y = table.shape[0]

    if plot_choice == "–ê–≤—Ç–æ":
        if n_levels_x <= 5 and n_levels_y <= 5:
            fig = px.imshow(table.values,
                            labels=dict(x=table.columns.name or "Col2",
                                        y=table.index.name or "Col1",
                                        color="Count"),
                            x=table.columns, y=table.index,
                            text_auto=True, color_continuous_scale="Blues")
        else:
            table_long = table.reset_index().melt(id_vars=table.index.name, value_name="count")
            fig = px.bar(table_long, x=table.columns.name, y="count", color=table.index.name,
                         barmode="group", title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç")
    elif plot_choice == "Heatmap":
        fig = px.imshow(table.values,
                        labels=dict(x=table.columns.name or "Col2",
                                    y=table.index.name or "Col1",
                                    color="Count"),
                        x=table.columns, y=table.index,
                        text_auto=True, color_continuous_scale="Blues")
    elif plot_choice == "Stacked bar":
        table_long = table.reset_index().melt(id_vars=table.index.name, value_name="count")
        fig = px.bar(table_long, x=table.columns.name, y="count", color=table.index.name,
                     barmode="stack", title="Stacked bar chart")
    else:
        table_long = table.reset_index().melt(id_vars=table.index.name, value_name="count")
        fig = px.bar(table_long, x=table.columns.name, y="count", color=table.index.name,
                     barmode="group", title="Clustered bar chart")

    st.plotly_chart(fig, use_container_width=True)

# ==== T-test ====
def run_ttest(df, col, group_col, paired=False):
    if not is_numeric(df[col]):
        st.error("‚ùå –î–ª—è t‚Äëtest –Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫.")
        return
    if not is_categorical(df[group_col]):
        st.error("‚ùå –ì—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π.")
        return

    groups = df[group_col].dropna().unique()
    if len(groups) != 2:
        st.error("‚ùå –î–ª—è t‚Äëtest –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 2 –≥—Ä—É–ø–ø—ã.")
        return

    g1 = df[df[group_col] == groups[0]][col].dropna()
    g2 = df[df[group_col] == groups[1]][col].dropna()

    if paired:
        if len(g1) != len(g2):
            st.error(f"‚ùå –î–ª—è –ø–∞—Ä–Ω–æ–≥–æ t‚Äëtest –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã. "
                     f"–°–µ–π—á–∞—Å: {len(g1)} –∏ {len(g2)}.")
            return
        stat, p = ttest_rel(g1, g2)
    else:
        stat, p = ttest_ind(g1, g2)

    summary_df = group_summary(df, col, group_col)
    display_test_result("t‚Äëtest", "t‚Äë—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stat, p)
    plot_group_means(summary_df)
    display_summary_table(summary_df)

# ==== ANOVA ====
def run_anova(df, col, group_col):
    if not is_numeric(df[col]):
        st.error("‚ùå –î–ª—è ANOVA –Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫.")
        return
    if not is_categorical(df[group_col]):
        st.error("‚ùå –ì—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π.")
        return

    groups = [df[df[group_col] == g][col].dropna() for g in df[group_col].dropna().unique()]
    if len(groups) < 3:
        st.error("‚ùå –î–ª—è ANOVA –º–∏–Ω–∏–º—É–º 3 –≥—Ä—É–ø–ø—ã.")
        return

    stat, p = f_oneway(*groups)
    summary_df = group_summary(df, col, group_col)
    display_test_result("ANOVA", "F‚Äë—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stat, p)
    plot_group_means(summary_df)
    display_summary_table(summary_df)

# ==== Chi-squared ====
def run_chi2(df, col1, col2, plot_choice="–ê–≤—Ç–æ"):
    if not (is_categorical(df[col1]) and is_categorical(df[col2])):
        st.error("‚ùå –î–ª—è Chi‚Äësquare –Ω—É–∂–Ω—ã –¥–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞.")
        return

    table = pd.crosstab(df[col1], df[col2])
    chi2, p, dof, expected = chi2_contingency(table)

    display_test_result("Chi‚Äësquare", "Chi¬≤‚Äë—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", chi2, p)
    plot_chi2_table(table, plot_choice)

    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    expected_df = pd.DataFrame(expected, index=table.index, columns=table.columns)
    st.subheader("üìä –ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    st.dataframe(table)
    st.subheader("üìä –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    st.dataframe(expected_df.round(2))



import pandas as pd
import plotly.express as px
import streamlit as st

# === 1. –°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º ===
def group_summary(df, num_col, cat_col):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏, SD, SE –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º.
    """
    summary = (
        df.groupby(cat_col)[num_col]
        .agg(['mean', 'std', 'count'])
        .reset_index()
        .rename(columns={
            'mean': '–°—Ä–µ–¥–Ω–µ–µ',
            'std': 'SD',
            'count': 'N',
            cat_col: '–ì—Ä—É–ø–ø–∞'
        })
    )
    summary['SE'] = summary['SD'] / summary['N']**0.5
    return summary


# === 2. –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ ===
def display_test_result(test_name, stat_label, stat_value, p_value, alpha=0.05):
    """
    –ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    if p_value < alpha:
        st.success(f"‚úÖ {test_name}: —Ä–∞–∑–ª–∏—á–∏—è –∑–Ω–∞—á–∏–º—ã (p = {p_value:.4f})")
    else:
        st.info(f"‚ÑπÔ∏è {test_name}: —Ä–∞–∑–ª–∏—á–∏—è –Ω–µ–∑–Ω–∞—á–∏–º—ã (p = {p_value:.4f})")

    st.metric(label=stat_label, value=f"{stat_value:.4f}")
    st.metric(label="p‚Äëvalue", value=f"{p_value:.4f}")


# === 3. Bar chart —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ ===
def plot_group_means(summary_df, title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"):
    """
    –°—Ç—Ä–æ–∏—Ç bar chart —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ (SE).
    """
    fig = px.bar(
        summary_df,
        x="–ì—Ä—É–ø–ø–∞",
        y="–°—Ä–µ–¥–Ω–µ–µ",
        error_y="SE",
        text="–°—Ä–µ–¥–Ω–µ–µ",
        color="–ì—Ä—É–ø–ø–∞",
        title=title
    )
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    st.plotly_chart(fig, use_container_width=True)


# === 4. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º ===
def display_summary_table(summary_df):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≥—Ä—É–ø–ø–∞–º.
    """
    st.dataframe(
        summary_df.style.format({
            "–°—Ä–µ–¥–Ω–µ–µ": "{:.2f}",
            "SD": "{:.2f}",
            "SE": "{:.2f}",
            "N": "{:d}"
        })
    )