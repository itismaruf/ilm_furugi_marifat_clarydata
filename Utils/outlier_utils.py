import pandas as pd
import numpy as np
import plotly.express as px
import streamlit as st
import plotly.graph_objects as go
from typing import Dict, List
from scipy.stats import skew

import streamlit as st

def render_outlier_handling_info():
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–∫—Ä—ã—Ç—É—é —Å–µ–∫—Ü–∏—é —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏.
    """
    with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤", expanded=False):
        st.markdown("""
        –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

        - –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é IQR-–º–µ—Ç–æ–¥–∞ –∏–ª–∏ Z-score.
        - –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IQR-–∫—Ä–∏—Ç–µ—Ä–∏–π).
        - –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –∏ –≥—Ä–∞–Ω–∏—Ü, –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º.
        """)



def detect_outliers_iqr(df: pd.DataFrame,
                        cols: list,
                        q_low: float = 0.25,
                        q_high: float = 0.75) -> dict:
    """
    –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–µ—Ç–æ–¥–æ–º IQR.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {column: boolean Series}, True —Ç–∞–º, –≥–¥–µ –≤—ã–±—Ä–æ—Å.
    """
    masks = {}
    for col in cols:
        series = df[col].dropna()
        Q1 = series.quantile(q_low)
        Q3 = series.quantile(q_high)
        IQR = Q3 - Q1
        lower = Q1 - 1.5 * IQR
        upper = Q3 + 1.5 * IQR
        masks[col] = (df[col] < lower) | (df[col] > upper)
    return masks


def detect_outliers_zscore(df: pd.DataFrame,
                           cols: list,
                           z_thresh: float = 3.0) -> dict:
    """
    –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—ã–±—Ä–æ—Å—ã –ø–æ Z-score.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {column: boolean Series}, True —Ç–∞–º, –≥–¥–µ |z| > z_thresh.
    """
    masks = {}
    for col in cols:
        series = df[col]
        mu = series.mean()
        sigma = series.std()
        # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if sigma == 0 or pd.isna(sigma):
            masks[col] = pd.Series(False, index=df.index)
        else:
            z = (series - mu) / sigma
            masks[col] = z.abs() > z_thresh
    return masks


def plot_outliers_distribution(
    df: pd.DataFrame,
    masks: Dict[str, pd.Series],
    cols: List[str]
) -> go.Figure:
    """
    –°—Ç—Ä–æ–∏—Ç scatter-—Ñ–∞—Å–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º (–≤–Ω–µ plot area).
    """
    if not cols:
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
            xaxis={'visible': False},
            yaxis={'visible': False},
            margin=dict(b=200)  # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –Ω–∏–∑–∞
        )
        fig.add_annotation(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü",
            xref="paper", yref="paper",
            x=0.5, y=-0.5,
            xanchor="center", yanchor="top",
            showarrow=False,
            font=dict(size=14)
        )
        return fig

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è Facet scatter
    plots = []
    for col in cols:
        plots.append(pd.DataFrame({
            "index": df.index,
            "value": df[col],
            "is_outlier": masks.get(col, pd.Series(False, index=df.index)),
            "feature": col
        }))
    long_df = pd.concat(plots, ignore_index=True)

    # –°—Ç—Ä–æ–∏–º Facet scatter
    fig = px.scatter(
        long_df,
        x="index", y="value",
        color="is_outlier",
        facet_col="feature",
        color_discrete_map={False: "blue", True: "red"},
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –≤—ã–±—Ä–æ—Å–æ–≤"
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–ª–∞–∑–∏–ª
    fig.update_layout(
        showlegend=False,
        margin=dict(t=60, b=130)
    )

    # –¢–µ–∫—Å—Ç-–ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
    fig.add_annotation(
        text=(
            "–°–∏–Ω–∏–µ —Ç–æ—á–∫–∏ ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è; "
            "–∫—Ä–∞—Å–Ω—ã–µ ‚Äî –≤—ã–±—Ä–æ—Å—ã (–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ IQR/Z-score)."
        ),
        xref="paper", yref="paper",
        x=0.5, y=-0.3,
        xanchor="center", yanchor="top",
        showarrow=False,
        font=dict(size=12)
    )

    return fig


def plot_outlier_removal_comparison(
    df_before: pd.DataFrame,
    df_after: pd.DataFrame,
    cols: List[str]
) -> go.Figure:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π '–¥–æ' –∏ '–ø–æ—Å–ª–µ' —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ä–∏—Å—É–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã, –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å.
    """
    # –ì–æ—Ç–æ–≤–∏–º –¥–ª–∏–Ω–Ω—ã–π DataFrame
    df_b = df_before[cols].copy().assign(dataset="before")
    df_a = df_after[cols].copy().assign(dataset="after")
    long_df = pd.concat([df_b, df_a], ignore_index=True)

    long_df = long_df.melt(
        id_vars="dataset",
        var_name="feature",
        value_name="value"
    )

    # –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    fig = px.histogram(
        long_df,
        x="value",
        color="dataset",
        facet_col="feature",
        facet_col_wrap=3,
        opacity=0.6,
        barmode="overlay",
        histnorm="density",
        nbins=50,
        color_discrete_map={
            "before": "#2ca02c",   # –∑–µ–ª—ë–Ω—ã–π –¥–ª—è '–¥–æ'
            "after":  "#d62728"    # –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è '–ø–æ—Å–ª–µ'
        }
    )

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å —Å—Ç–æ–ª–±—Ü–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ñ–∞—Å–µ—Ç–æ–≤
    fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))

    fig.update_layout(
        legend_title_text="–î–∞—Ç–∞-—Å—ç—Ç",
        margin=dict(t=60, b=20),
    )

    return fig



def outliers_summary(df: pd.DataFrame, masks: dict) -> pd.DataFrame:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤—ã–±—Ä–æ—Å–æ–≤:
    —Å—Ç–æ–ª–±–µ—Ü, –æ–±—â–µ–µ —á–∏—Å–ª–æ –≤—ã–±—Ä–æ—Å–æ–≤, % –≤—ã–±—Ä–æ—Å–æ–≤.
    """
    records = []
    n = len(df)
    for col, mask in masks.items():
        cnt = int(mask.sum())
        records.append({
            "column": col,
            "total_outliers": cnt,
            "percent": round(cnt / n * 100, 2)
        })
    return pd.DataFrame(records)


def run_auto_outlier_removal(df: pd.DataFrame, z_thresh: float = 3.0):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã:
      - –ï—Å–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ ~–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ (|skew| < 1) ‚Üí Z-score
      - –ò–Ω–∞—á–µ ‚Üí IQR
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      before_df  ‚Äî DataFrame —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—ã–±—Ä–æ—Å–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏,
      log        ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"column", "method", "removed_count"},
      cleaned_df ‚Äî –∏—Ç–æ–≥–æ–≤—ã–π DataFrame –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤.
    """
    numeric_cols = df.select_dtypes(include="number").columns.tolist()
    before = []
    log = []
    cleaned = df.copy()

    for col in numeric_cols:
        s = cleaned[col].dropna()
        if s.empty:
            continue

        try:
            skewness = skew(s)
            method = "Z-score" if abs(skewness) < 1 else "IQR"

            if method == "IQR":
                masks = detect_outliers_iqr(cleaned, [col], q_low=0.25, q_high=0.75)
                removed = int(masks[col].sum())
                if removed > 0:
                    before.append({"column": col, "removed_count": removed})
                    log.append({"column": col, "method": "IQR", "removed_count": removed})
                    cleaned = cleaned.loc[~masks[col]]

            elif method == "Z-score":
                mu, sigma = s.mean(), s.std()
                if sigma == 0 or pd.isna(sigma):
                    log.append({"column": col, "method": "Z-score", "removed_count": 0, "note": "std=0"})
                    continue

                z = (cleaned[col] - mu) / sigma
                mask = z.abs() > z_thresh
                removed = int(mask.sum())
                if removed > 0:
                    before.append({"column": col, "removed_count": removed})
                    log.append({"column": col, "method": "Z-score", "removed_count": removed})
                    cleaned = cleaned.loc[~mask]

        except Exception as e:
            log.append({"column": col, "method": "auto", "error": str(e)})

    before_df = pd.DataFrame(before)
    return before_df, log, cleaned



def render_outlier_rules_table():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.
    """
    rules = [
        {
            "–ú–µ—Ç–æ–¥": "IQR (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)",
            "–ì—Ä–∞–Ω–∏—Ü—ã": "q_low=0.25, q_high=0.75",
            "–§–æ—Ä–º—É–ª–∞": "Q1 - 1.5‚ãÖIQR, Q3 + 1.5‚ãÖIQR"
        },
        {
            "–ú–µ—Ç–æ–¥": "Z-score",
            "–ì—Ä–∞–Ω–∏—Ü—ã": "threshold=3.0",
            "–§–æ—Ä–º—É–ª–∞": "|x - Œº| / œÉ > threshold"
        }
    ]

    df_rules = pd.DataFrame(rules).set_index("–ú–µ—Ç–æ–¥")
    st.markdown("### üìå –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤")
    st.table(df_rules)

    st.markdown("**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞¬ª –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    st.markdown(
        "- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—É—é –∞—Å–∏–º–º–µ—Ç—Ä–∏—é –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí IQR-–º–µ—Ç–æ–¥\n"
        "- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–ª–∏–∑–∫–∏ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é ‚Üí Z-score-–º–µ—Ç–æ–¥"
    )


def remove_outliers_iqr(df: pd.DataFrame,
                        cols: list,
                        q_low: float = 0.25,
                        q_high: float = 0.75) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –ø–æ IQR-–º–µ—Ç–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.
    """
    cleaned = df.copy()
    masks = detect_outliers_iqr(cleaned, cols, q_low, q_high)
    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Å–∫–∏: —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ –ª—é–±–æ–º —Å—Ç–æ–ª–±—Ü–µ –≤—ã–±—Ä–æ—Å
    combined = np.logical_or.reduce([masks[c] for c in cols])
    return cleaned.loc[~combined]


def remove_outliers_zscore(df: pd.DataFrame,
                           cols: list,
                           z_thresh: float = 3.0) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –ø–æ Z-score –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.
    """
    cleaned = df.copy()
    masks = detect_outliers_zscore(cleaned, cols, z_thresh)
    combined = np.logical_or.reduce([masks[c] for c in cols])
    return cleaned.loc[~combined]


def cap_outliers(df: pd.DataFrame,
                 cols: list,
                 q_low: float = 0.25,
                 q_high: float = 0.75) -> pd.DataFrame:
    """
    ¬´–ö–∞–ø–ø–∏—Ç¬ª –≤—ã–±—Ä–æ—Å—ã –ø–æ IQR-–º–µ—Ç–æ–¥—É: –∑–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ/–≤—ã—à–µ –≥—Ä–∞–Ω–∏—Ü
    –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã.
    """
    capped = df.copy()
    for col in cols:
        series = capped[col].dropna()
        Q1 = series.quantile(q_low)
        Q3 = series.quantile(q_high)
        IQR = Q3 - Q1
        lower = Q1 - 1.5 * IQR
        upper = Q3 + 1.5 * IQR
        capped[col] = capped[col].clip(lower, upper)
    return capped


def remove_outliers_percentile(df: pd.DataFrame,
                               cols: list,
                               p_low: float,
                               p_high: float) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ
    –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã.
    """
    cleaned = df.copy()
    for col in cols:
        low_val = np.percentile(cleaned[col].dropna(), p_low)
        high_val = np.percentile(cleaned[col].dropna(), p_high)
        cleaned = cleaned[(cleaned[col] >= low_val) & (cleaned[col] <= high_val)]
    return cleaned

def show_outlier_summary(
    before_df: pd.DataFrame,
    after_df: pd.DataFrame,
    cols: List[str]
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞:
      mean, std, min, max ‚Äì –¥–æ –∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, 
      –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
    –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏.
    """
    summary = []
    for col in cols:
        stats_before = before_df[col].describe()
        stats_after  = after_df[col].describe()

        summary.append({
            "column":      col,
            "mean_before": stats_before["mean"],
            "mean_after":  stats_after["mean"],
            "std_before":  stats_before["std"],
            "std_after":   stats_after["std"],
            "min_before":  stats_before["min"],
            "min_after":   stats_after["min"],
            "max_before":  stats_before["max"],
            "max_after":   stats_after["max"],
        })

    df_summary = (
        pd.DataFrame(summary)
          .set_index("column")
          .round(2)     # <-- –æ–∫—Ä—É–≥–ª—è–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    )

    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤**")
    st.table(df_summary)

    removed_rows = len(before_df) - len(after_df)
    st.write(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤—Å–µ–≥–æ: {removed_rows}")