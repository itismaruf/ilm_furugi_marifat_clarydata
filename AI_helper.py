import os
import requests
import streamlit as st
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
api_key = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")

if not api_key:
    raise ValueError("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ .env –∏–ª–∏ secrets.")

# === –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ ===
INITIAL_SYSTEM_PROMPT = (
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ. "
    "–ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏, –∫–∞–∫ –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —É —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç. –ù–µ –ø–∏—à–∏ –∫–æ–¥."
)

chat_history = [
    {
        "role": "system",
        "content": INITIAL_SYSTEM_PROMPT
    }
]
context = {}

def update_context(key, value):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞."""
    context[key] = value

def reset_ai_conversation():
    """
    –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–∞–º—è—Ç–∏ –ò–ò (–∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞).
    –í—ã–∑—ã–≤–∞–π –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞ –∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
    """
    global chat_history
    chat_history = [
        {
            "role": "system",
            "content": INITIAL_SYSTEM_PROMPT
        }
    ]
    context.clear()

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
def get_chatgpt_response(prompt, model="mistralai/devstral-small-2505:free"):
    """–ó–∞–ø—Ä–æ—Å –≤ –ò–ò —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    if not prompt or not isinstance(prompt, str):
        return "‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å."

    context_info = "\n".join([f"{k}: {v}" for k, v in context.items()])
    full_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_info}\n\n{prompt}, –Ω–µ –∫–æ–≥–¥–∞ –Ω–µ –¥–∞–≤–∞–π –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ —á—Ç–æ –ø—Ä–æ—Å—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –µ—Å–ª–∏ –Ω–∞–¥–æ!"

    chat_history.append({"role": "user", "content": full_prompt})

    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
            json={"model": model, "messages": chat_history},
            timeout=20
        )
        data = resp.json()
        if "choices" in data and data["choices"]:
            reply = data["choices"][0]["message"]["content"]
            chat_history.append({"role": "assistant", "content": reply})
            return reply
        return f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API: {data}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

def chat_with_context(message, model="mistralai/devstral-small-2505:free"):
    """–û–±—â–µ–Ω–∏–µ —Å –ò–ò —Å —É—á—ë—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)."""
    if not message or not isinstance(message, str):
        return "‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å."

    chat_history.append({"role": "user", "content": message})

    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
            json={"model": model, "messages": chat_history},
            timeout=20
        )
        data = resp.json()
        if "choices" in data and data["choices"]:
            reply = data["choices"][0]["message"]["content"]
            chat_history.append({"role": "assistant", "content": reply})
            return reply
        return f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API: {data}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

    

def notify_ai_dataset_and_goal(df, user_desc, get_fn=get_chatgpt_response):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ò–ò —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ –∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞.
    """
    try:
        # === –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
        info = [f"–†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤"]

        # === –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º ===
        col_details = []
        for col in df.columns:
            dtype = str(df[col].dtype)
            missing = df[col].isna().sum()
            missing_pct = round(missing / len(df) * 100, 2)

            if df[col].dtype in ["int64", "float64"]:
                desc = df[col].describe()
                detail = (
                    f"{col} ({dtype}) ‚Üí min={desc['min']}, max={desc['max']}, "
                    f"mean={round(desc['mean'],2)}, std={round(desc['std'],2)}, "
                    f"–ø—Ä–æ–ø—É—Å–∫–∏={missing} ({missing_pct}%)"
                )
            elif df[col].dtype == "object" or df[col].dtype.name == "category":
                uniques = df[col].nunique()
                examples = df[col].dropna().unique()[:3]
                detail = (
                    f"{col} ({dtype}) ‚Üí {uniques} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π "
                    f"(–ø—Ä–∏–º–µ—Ä—ã: {', '.join(map(str, examples))}), "
                    f"–ø—Ä–æ–ø—É—Å–∫–∏={missing} ({missing_pct}%)"
                )
            elif "datetime" in dtype:
                min_date, max_date = df[col].min(), df[col].max()
                detail = (
                    f"{col} ({dtype}) ‚Üí –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {min_date} ‚Äî {max_date}, "
                    f"–ø—Ä–æ–ø—É—Å–∫–∏={missing} ({missing_pct}%)"
                )
            else:
                detail = f"{col} ({dtype}) ‚Üí –ø—Ä–æ–ø—É—Å–∫–∏={missing} ({missing_pct}%)"

            col_details.append(detail)

        info.append("–ö–æ–ª–æ–Ω–∫–∏:\n- " + "\n- ".join(col_details))

        # === –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫ (–ø–µ—Ä–≤—ã–µ 2) ===
        sample_rows = df.head(2).to_dict(orient="records")
        info.append(f"–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫: {sample_rows}")

        # === –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò ===
        dataset_info = "\n".join(info)
        if user_desc.strip():
            prompt = f"[DATASET STRUCTURE]\n{dataset_info}\n\n[ANALYSIS GOAL]\n{user_desc}"
            update_context("user_goal", user_desc)
        else:
            prompt = f"[DATASET STRUCTURE]\n{dataset_info}"

        update_context("dataset_structure", dataset_info)

        # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò ===
        with st.spinner("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ò–ò..."):
            get_fn(prompt)

        # === –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ ===
        if user_desc.strip():
            return "‚úÖ –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à—É —Ü–µ–ª—å, –ò–ò –ø–æ–¥–∫–ª—é—á—ë–Ω"
        else:
            return "‚úÖ –ò–ò –ø–æ–¥–∫–ª—é—á—ë–Ω"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ò–ò: {e}"


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π ===
def send_correlation_to_ai(df):
    numeric_df = df.select_dtypes(include="number")
    if numeric_df.shape[1] < 2:
        return "üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏."

    corr = numeric_df.corr().abs().unstack().sort_values(ascending=False)
    corr = corr[corr < 1].drop_duplicates()
    top_corr = corr.head(10)

    formatted_corr = "\n".join([f"{a} –∏ {b}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {v:.2f}" for (a, b), v in top_corr.items()])
    prompt = f"–¢–æ–ø-10 –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:\n{formatted_corr}"
    return chat_with_context(prompt)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ===
def send_pivot_to_ai(pivot_df, index_col, value_col, agg_func):
    try:
        if pivot_df is None:
            return "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É."

        top_rows = pivot_df.head(10).to_dict(orient="records")
        formatted = "\n".join(map(str, top_rows))
        prompt = f"–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ {index_col}, –∞–≥—Ä–µ–≥–∏—Ä—É—è {value_col} –º–µ—Ç–æ–¥–æ–º {agg_func}:\n{formatted}"
        return chat_with_context(prompt)
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}"