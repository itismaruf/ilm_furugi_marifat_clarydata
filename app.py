# ============= –ú–æ–¥—É–ª–∏
import streamlit as st
import pandas as pd
import os
import time
import io
from sklearn.model_selection import train_test_split


from Utils.upload_utils import load_data, get_base_info, show_data_head, show_descriptive_stats, display_base_info

from Utils.automatic_data_processing import (summarize_missing, render_nan_rules_table, run_auto_cleaning, \
                                                apply_manual_cleaning, show_na_summary, prepare_csv_download )

from Utils.outlier_utils import (detect_outliers_iqr, detect_outliers_zscore, \
    plot_outliers_distribution, outliers_summary, run_auto_outlier_removal, render_outlier_rules_table, \
    remove_outliers_iqr, remove_outliers_zscore, cap_outliers, remove_outliers_percentile, plot_outlier_removal_comparison)

from Utils.visualization import show_chart_tab, show_ai_suggestions, show_correlation_tab, show_pivot_tab

from Utils.stats_tests import show_ttest_ui, show_anova_ui, show_chi2_ui

from Utils.modeling_utils import ensure_modeling_state, sticky_selectbox, show_model_settings, \
                                 prepare_features_and_target, train_logistic_regression, evaluate_model, \
                                 compute_feature_importance, interpret_feature_importance, mark_model_trained, \
                                 show_results_and_analysis, show_single_prediction, show_export_buttons

from Utils.chat import continue_chat, render_message, reset_chat_history

from AI_helper import update_context, reset_ai_conversation, get_chatgpt_response, notify_ai_dataset_and_goal


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")

# === –ó–∞—Å—Ç–∞–≤–∫–∞ ===
if "app_loaded" not in st.session_state:
    st.markdown("""
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                width: 100%;
                font-family: 'Inter', sans-serif;
                overflow: hidden;
            }

            .splash-container {
                position: fixed;
                top: 0; left: 0;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
                color: #0f172a;
                z-index: 9999;
                animation: fadeIn 1s ease-in-out;
                transition: opacity 1s ease-out;
            }

            .splash-container.fade-out {
                opacity: 0;
                pointer-events: none;
            }

            .ai-emoji {
                font-size: 3.2em;
                margin-bottom: 20px;
                animation: pulse 2s infinite;
            }

            .splash-title {
                font-size: 2.4em;
                font-weight: 700;
                text-align: center;
                opacity: 0;
                animation: fadeUp 1.2s ease-out forwards;
                animation-delay: 0.4s;
            }

            .splash-subtext {
                font-size: 1em;
                margin-top: 12px;
                color: #475569;
                opacity: 0;
                animation: fadeUp 1.4s ease-out forwards;
                animation-delay: 0.8s;
                text-align: center;
                max-width: 600px;
                padding: 0 16px;
            }

            .splash-footer {
                position: absolute;
                bottom: 18px;
                font-size: 0.8em;
                color: #64748b;
                text-align: center;
            }

            @keyframes fadeUp {
                0% { opacity: 0; transform: translateY(20px); }
                100% { opacity: 1; transform: translateY(0); }
            }

            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }

            @keyframes pulse {
                0%, 100% {
                    transform: scale(1);
                    opacity: 1;
                }
                50% {
                    transform: scale(1.15);
                    opacity: 0.75;
                }
            }
        </style>

        <div class="splash-container" id="splash">
            <div class="ai-emoji">‚ú®</div>
            <div class="splash-title">ClariData</div>
            <div class="splash-subtext">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</div>
            <div class="splash-footer">¬© Created by Rahimov M.A.</div>
        </div>

        <script>
            setTimeout(() => {
                const splash = document.getElementById("splash");
                if (splash) splash.classList.add("fade-out");
            }, 3000);
        </script>
    """, unsafe_allow_html=True)

    time.sleep(3)
    st.session_state.app_loaded = True
    st.rerun()


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å ---
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

if "_ai_session_inited" not in st.session_state:
    reset_ai_conversation()                 # —Å–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    st.session_state["_ai_session_inited"] = True

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
if 'page' not in st.session_state:
    st.session_state['page'] = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'

st.markdown("""
    <style>
        /* –ö–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä –æ—Ç–∫—Ä—ã—Ç (aria-expanded="true"), –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–º–µ—â–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ */
        [data-testid="stSidebar"][aria-expanded="true"] ~ .main .block-container {
            margin-left: 300px;
            transition: margin-left 0.3s ease;
        }
        /* –ö–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä —Å–≤–µ—Ä–Ω—É—Ç (aria-expanded="false"), –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ */
        [data-testid="stSidebar"][aria-expanded="false"] ~ .main .block-container {
            margin-left: 1rem;
            transition: margin-left 0.3s ease;
        }
    </style>
""", unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def set_page(page_name):
    st.session_state['page'] = page_name

# --- –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–æ–∫ ---
st.sidebar.header("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
pages = {
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üì•",
    "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üõ°Ô∏è",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤": "‚öôÔ∏è",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤": "üö©",
    "–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ EDA": "üìä",
    "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã": "üìâ",
    "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ": "üìü",
    "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)": "üí¨",
    "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "üìù"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
st.markdown("""
    <style>
        div.stButton > button {
            background-color: #f0f2f6;
            color: black;
            border: 1px solid #ccc;
            border-radius: 6px;
        }
        div.stButton > button:hover {
            background-color: #e0f0ff;
            color: #007BFF;
            border: 1px solid #007BFF;
        }
    </style>
""", unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for name, icon in pages.items():
    st.sidebar.button(f"{icon} {name}", on_click=set_page, args=(name,))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()


# ===================== –°–¢–†–ê–ù–ò–¶–´ =======================
# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state['page'] == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.caption('üí°–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å ClaryData, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"!')
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    if "df" not in st.session_state:
        uploaded_file = st.file_uploader(" ", type=["csv", "xlsx", "xls"])
        if not uploaded_file:
            st.info("‚¨Ü –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", icon="üìÅ")
        else:
            try:
                df = load_data(uploaded_file)
                st.session_state["df"] = df
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", icon="‚úÖ")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", icon="üö´")
    else:
        df = st.session_state["df"]
        st.success("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")

    # --- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ---
    if "df" in st.session_state:
        st.markdown("---")

        # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –≤ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–µ
        with st.expander("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏)", expanded=False):
            show_data_head(df)

        # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–µ
        with st.expander("üìë –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", expanded=False):
            show_descriptive_stats(df)

        # –ú–µ—Ç—Ä–∏–∫–∏
        base_info = get_base_info(df)
        display_base_info(base_info)

        # ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ summary ‚Äî
        data_sig = (tuple(df.columns), df.shape)
        if st.session_state.get("_data_sig") != data_sig:
            summary = f"{df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤; –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(map(str, df.columns))}"
            st.session_state["_data_sig"] = data_sig
            st.session_state["data_summary"] = summary
            try:
                update_context("data_summary", summary)
            except Exception:
                pass
        else:
            summary = st.session_state.get(
                "data_summary",
                f"{df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤; –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(map(str, df.columns))}"
            )

        st.markdown("---")
        # –ë–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ò–ò –≤ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–µ
        with st.expander("ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–ò", expanded=False):
            st.caption("–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ò–ò –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–º–æ—â—å –ø–æ–¥ –Ω–µ—ë.")

            user_desc = st.text_area(
                label="–¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è —Ü–µ–Ω—ã –Ω–∞ –∂–∏–ª—å—ë –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                value=st.session_state.get("analysis_goal", ""),
                height=100,
                label_visibility="collapsed",
                key="analysis_goal_input" 
            )

            if st.button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ò–ò"):
                msg = notify_ai_dataset_and_goal(df, user_desc, get_chatgpt_response)
                st.success(msg)

        if st.button("ü§ñ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ò–ò"):
            msg = notify_ai_dataset_and_goal(df, user_desc, get_chatgpt_response)
            st.success(msg)

# === –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state['page'] == "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∞")

    with st.expander("üß≠ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —Ä–∞–∑–¥–µ–ª–æ–º"):
        st.write(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. "
            "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è—é—Ç—Å—è –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫–∏, "
            "–∞ –∑–∞—Ç–µ–º –≤—ã—è–≤–ª—è—é—Ç—Å—è –∏ —É—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –≤—ã–±—Ä–æ—Å—ã. "
            "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—á–∏—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, –≥–æ—Ç–æ–≤—ã–π –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∞–Ω–∞–ª–∏–∑—É."
        )


    if "df" not in st.session_state:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ üì• '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'.", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]

        if st.button("ü´ß –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
            # –®–∞–≥ 1: –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
            with st.spinner("–®–∞–≥ 1/2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤‚Ä¶"):
                time.sleep(2)  # –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    stats_before, clean_log, df = run_auto_cleaning(df)
                    if len(clean_log) == 0:
                        st.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å.")
                    else:
                        st.success("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                        st.write(pd.DataFrame(clean_log))
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}", icon="üö´")

            # –®–∞–≥ 2: –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
            with st.spinner("–®–∞–≥ 2/2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤‚Ä¶"):
                time.sleep(2)  # –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    before_df, outlier_log, df = run_auto_outlier_removal(df)
                    if len(outlier_log) == 0:
                        st.info("‚ÑπÔ∏è –í—ã–±—Ä–æ—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å.")
                    else:
                        st.success("‚úÖ –í—ã–±—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±—Ä–æ—Å–æ–≤: {e}", icon="üö´")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.session_state["df"] = df


# === –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ===
if st.session_state.get("page") == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤":
    st.title("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    st.caption('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (NaN), –ø–æ–¥—Ä–æ–±–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"!')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "data_changed" not in st.session_state:
        st.session_state["data_changed"] = False

    if "df" not in st.session_state:
        st.warning("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]

        # üéØ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        target = st.selectbox(
            "–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–µ–µ NaN –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)",
            [None] + list(df.columns)
        )

        st.markdown("---")

        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        st.subheader("üìä –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
        missing = summarize_missing(df)

        if missing.empty:
            st.success("–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö", icon="‚úÖ")
        else:
            st.table(
                missing.rename(columns={
                    "column": "–°—Ç–æ–ª–±–µ—Ü",
                    "missing_count": "–ö–æ–ª-–≤–æ",
                    "pct_missing": "% –ø—Ä–æ–ø—É—Å–∫–æ–≤"
                }).set_index("–°—Ç–æ–ª–±–µ—Ü")
            )

            st.markdown("---")

            # ü§ñ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
            st.subheader("ü§ñ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞")
            with st.expander("üìå –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏"):
                render_nan_rules_table()

            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É"):
                before, log, new_df = run_auto_cleaning(df, target_col=target)
                st.session_state["df"] = new_df
                st.session_state["data_changed"] = True

                if before.empty:
                    st.info("–ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", icon="‚úÖ")
                else:
                    st.markdown("**–î–æ –æ—á–∏—Å—Ç–∫–∏**")
                    st.table(
                        before.rename(columns={
                            "column": "–°—Ç–æ–ª–±–µ—Ü",
                            "missing_count": "–ö–æ–ª-–≤–æ",
                            "pct_missing": "% –ø—Ä–æ–ø—É—Å–∫–æ–≤"
                        }).set_index("–°—Ç–æ–ª–±–µ—Ü")
                    )

                    with st.spinner("–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞..."):
                        time.sleep(1)

                    report = pd.DataFrame(log).rename(columns={
                        "column": "–°—Ç–æ–ª–±–µ—Ü",
                        "missing_count": "–ö–æ–ª-–≤–æ",
                        "pct_missing": "% –ø—Ä–æ–ø—É—Å–∫–æ–≤",
                        "action": "–î–µ–π—Å—Ç–≤–∏–µ"
                    }).set_index("–°—Ç–æ–ª–±–µ—Ü")

                    st.markdown("**–û—Ç—á–µ—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏**")
                    st.table(report)

                    remaining = new_df.isna().sum().sum()
                    st.success(f"–ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å–∫–æ–≤: {remaining}")

        st.markdown("---")

        # üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        st.subheader("üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
        with st.expander("‚úçÔ∏è –ü–∞–Ω–µ–ª—å —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"):
            cols = st.multiselect(
                "–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                [c for c in df.columns if c != target]
            )
            action = st.radio(
                "–î–µ–π—Å—Ç–≤–∏–µ:",
                ["–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏", "–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã (—Å NaN)", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN",
                 "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã", "–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"]
            )
            show_tables = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ NaN", value=True)

            method = value = None
            if action == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN":
                method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:", ["mean", "median", "mode", "constant"])
                if method == "constant":
                    value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:")

            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                before = df.copy()
                new_df = apply_manual_cleaning(df, action, cols, target, method, value)

                st.session_state["df"] = new_df
                st.session_state["data_changed"] = True
                st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                if show_tables and action != "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã":
                    show_na_summary(before, new_df, cols)
                elif show_tables and action == "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã":
                    st.markdown("**–†–∞–∑–º–µ—Ä –¥–æ/–ø–æ—Å–ª–µ (—Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã)**")
                    col1, col2 = st.columns(2)
                    col1.write(before.shape)
                    col2.write(new_df.shape)

        # üì• –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if st.session_state.get("data_changed", False) and not st.session_state["df"].empty:
            st.markdown("---")
            st.subheader("üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            file_name, csv_buffer = prepare_csv_download(
                st.session_state["df"],
                st.session_state.get("original_filename")
            )

            st.success("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
            st.download_button(
                label=f"üíæ –°–∫–∞—á–∞—Ç—å {file_name}",
                data=csv_buffer,
                file_name=file_name,
                mime="text/csv"
            )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ ===
if st.session_state.get("page") == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤":
    st.title("üö© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
    st.caption('‚Ñπ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥—Ä–æ–±–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"!')


        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "data_changed" not in st.session_state:
        st.session_state["data_changed"] = False

    if "df" not in st.session_state:
        st.warning("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]
        numeric_cols = df.select_dtypes(include="number").columns.tolist()

        # # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        # render_outlier_handling_info()
        # st.markdown("---")

        # –ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤"):
            cols_viz = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                numeric_cols,
                key="out_viz_cols"
            )
            method_viz = st.radio(
                "–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤",
                ["IQR-–º–µ—Ç–æ–¥", "Z-score"],
                key="out_viz_method"
            )

            if method_viz == "IQR-–º–µ—Ç–æ–¥":
                q_low, q_high = st.slider(
                    "–ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è IQR",
                    0.0, 0.5, (0.25, 0.75),
                    step=0.05,
                    key="iqr_viz"
                )
            else:
                z_thresh = st.number_input(
                    "–ü–æ—Ä–æ–≥ Z-score",
                    min_value=1.0, max_value=5.0,
                    value=3.0, step=0.1,
                    key="z_viz"
                )

            if st.button("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã", key="show_out_viz"):
                masks = (detect_outliers_iqr(df, cols_viz, q_low, q_high)
                         if method_viz == "IQR-–º–µ—Ç–æ–¥"
                         else detect_outliers_zscore(df, cols_viz, z_thresh))
                fig = plot_outliers_distribution(df, masks, cols_viz)
                st.plotly_chart(fig, use_container_width=True)

                summary = outliers_summary(df, masks)
                st.table(summary.set_index("column"))

        st.markdown("---")

        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
        st.subheader("ü§ñ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("üìå –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤"):
            render_outlier_rules_table()

        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –≤—ã–±—Ä–æ—Å–æ–≤", key="auto_out"):
            before, log, cleaned_df = run_auto_outlier_removal(df)
            st.session_state["df"] = cleaned_df

            total_removed = sum(item["removed_count"] for item in log)
            if total_removed == 0:
                st.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", icon="‚úÖ")
            else:
                report = (
                    pd.DataFrame(log)
                      .rename(columns={
                          "column": "–°—Ç–æ–ª–±–µ—Ü",
                          "method": "–ú–µ—Ç–æ–¥",
                          "removed_count": "–£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤"
                      })
                      .set_index("–°—Ç–æ–ª–±–µ—Ü")
                )
                st.markdown("**–û—Ç—á–µ—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤**")
                st.table(report)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {total_removed}")

                st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–æ –∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏")
                fig_cmp = plot_outlier_removal_comparison(df, cleaned_df, numeric_cols)
                st.plotly_chart(fig_cmp, use_container_width=True)

        st.markdown("---")

        st.subheader("üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("‚úçÔ∏è –ü–∞–Ω–µ–ª—å —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                cols_manual = st.multiselect(
                    "–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    numeric_cols,
                    key="out_manual_cols"
                )
            with col2:
                method_manual = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    [
                        "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)",
                        "–ö–∞–ø–ø–∏–Ω–≥ (IQR-–≥—Ä–∞–Ω–∏—Ü—ã)",
                        "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Z-score",
                        "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º"
                    ],
                    key="out_manual_method"
                )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
            if method_manual in ("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)", "–ö–∞–ø–ø–∏–Ω–≥ (IQR-–≥—Ä–∞–Ω–∏—Ü—ã)"):
                low_q, high_q = st.slider(
                    "–ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è IQR",
                    0.0, 0.5, (0.25, 0.75),
                    step=0.05,
                    key="iqr_manual"
                )
            elif method_manual == "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Z-score":
                z_manual = st.number_input(
                    "–ü–æ—Ä–æ–≥ Z-score",
                    min_value=1.0, max_value=5.0,
                    value=3.0, step=0.1,
                    key="z_manual"
                )
            else:  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º
                p_low, p_high = st.slider(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    0, 100, (5, 95),
                    step=1,
                    key="percentile_manual"
                )

            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∫—É"):
                before_manual = df.copy()
                cleaned_manual = df.copy()

                for col in cols_manual:
                    if method_manual == "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)":
                        cleaned_manual = remove_outliers_iqr(cleaned_manual, [col], low_q, high_q)
                    elif method_manual == "–ö–∞–ø–ø–∏–Ω–≥ (IQR-–≥—Ä–∞–Ω–∏—Ü—ã)":
                        cleaned_manual = cap_outliers(cleaned_manual, [col], low_q, high_q)
                    elif method_manual == "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Z-score":
                        cleaned_manual = remove_outliers_zscore(cleaned_manual, [col], z_manual)
                    else:
                        cleaned_manual = remove_outliers_percentile(cleaned_manual, [col], p_low, p_high)

                st.session_state["df"] = cleaned_manual
                st.success("‚úÖ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                # show_outlier_summary(before_manual, cleaned_manual, cols_manual)

                st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–æ –∏ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
                fig_cmp_manual = plot_outlier_removal_comparison(
                    before_manual, cleaned_manual, cols_manual
                )
                st.plotly_chart(fig_cmp_manual, use_container_width=True)

        # === üì• –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ===
        if st.session_state.get("data_changed", False) and not st.session_state["df"].empty:
            st.markdown("---")
            st.subheader("üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            base_name = "data"
            if "original_filename" in st.session_state:
                base_name = os.path.splitext(st.session_state["original_filename"])[0]
            file_name = f"{base_name}_cleaned.csv"

            csv_buffer = io.BytesIO()
            st.session_state["df"].to_csv(csv_buffer, index=False)
            csv_buffer.seek(0)

            st.success("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
            st.download_button(
                label=f"üíæ –°–∫–∞—á–∞—Ç—å {file_name}",
                data=csv_buffer,
                file_name=file_name,
                mime="text/csv"
            )


# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ EDA ===
elif st.session_state["page"] == "–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ EDA":
    st.title("üìä –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ EDA")
    st.caption('‚Ñπ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ EDA, –ø–æ–¥—Ä–æ–±–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"!')

    if "df" not in st.session_state:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]
        tabs = st.tabs(["üìä –ì—Ä–∞—Ñ–∏–∫–∏", "üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", "üìä –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"])

        with tabs[0]:
            show_ai_suggestions(df)
            show_chart_tab(df)
            

        with tabs[1]:
            show_correlation_tab(df)

        with tabs[2]:
            show_pivot_tab(df)



# === –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã ===
if st.session_state.get("page") == "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã":
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    st.caption("‚Ñπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑: t‚Äëtest, ANOVA –∏ Chi‚Äësquare")

    if "df" not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        st.stop()

    df = st.session_state.df

    with st.expander("üß≠ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç?", expanded=False):
        st.markdown("""
        - **t‚Äëtest** ‚Äî 2 –≥—Ä—É–ø–ø—ã, —á–∏—Å–ª–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Üí —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö  
        - **ANOVA** ‚Äî 3+ –≥—Ä—É–ø–ø, —á–∏—Å–ª–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Üí —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö  
        - **Chi‚Äësquare** ‚Äî 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        """)

    selected_test = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç",
        ["t-test", "ANOVA", "Chi-squared"],
        key="stats_test_choice"
    )

    st.markdown("---")

    if selected_test == "t-test":
        show_ttest_ui(df)
    elif selected_test == "ANOVA":
        show_anova_ui(df)
    else:
        show_chi2_ui(df)


# === –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
if st.session_state.get("page") == "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.title("ü§ñ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    st.caption("‚Ñπ –§–æ–∫—É—Å: –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –∏ –ø–æ—á–µ–º—É –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")

    if "df" not in st.session_state:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        st.stop()

    df = st.session_state["df"]
    ms = ensure_modeling_state(df)

    options = list(df.columns)
    target_col, _ = sticky_selectbox("modeling_state", "target", "üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (binary target)", options, ui_key="modeling_target_ui")

    if len(pd.Series(df[target_col].dropna().unique())) > 2:
        st.error("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–π")
        st.stop()

    feature_cols = [c for c in df.columns if c != target_col]
    if not feature_cols:
        st.error("–ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        st.stop()

    C_value, penalty, max_iter, threshold, test_size, use_class_weight = show_model_settings()

    if st.button("üöÄ –û–±—É—á–∏—Ç—å / –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", use_container_width=True):
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X, y_encoded, le, num_cols, cat_cols = prepare_features_and_target(df, target_col)
            X_train, X_test, y_train, y_test = train_test_split(
                X, y_encoded, test_size=test_size, random_state=42, stratify=y_encoded
            )

            # –û–±—É—á–µ–Ω–∏–µ
            class_weight = "balanced" if use_class_weight else None
            model, meta = train_logistic_regression(
                X_train, y_train,
                C=C_value, penalty=penalty,
                class_weight=class_weight, max_iter=max_iter,
                label_encoder=le
            )

            # –û—Ü–µ–Ω–∫–∞
            metrics, roc_data, pr_data = evaluate_model(model, X_test, y_test, meta, threshold)
            importance_df = compute_feature_importance(model, meta)
            short_text = interpret_feature_importance(importance_df, top_n=3)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            st.session_state["modeling"] = {
                "model": model, "meta": meta,
                "threshold": threshold, "metrics": metrics,
                "roc": roc_data, "pr": pr_data,
                "importance_df": importance_df, "short_text": short_text,
                "target_col": target_col, "feature_cols": feature_cols,
                "params": {
                    "C": C_value, "penalty": penalty,
                    "class_weight": class_weight, "max_iter": max_iter,
                    "test_size": test_size
                }
            }

            mark_model_trained()
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")

    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if "modeling" in st.session_state:
        data = st.session_state["modeling"]

        show_results_and_analysis(data)
        show_single_prediction(data, df)
        show_export_buttons(data)

# === –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò) ===
if st.session_state.get("page") == "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)":
    st.title("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö?")
    st.markdown("---")

    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        reset_chat_history()
        st.success("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")
        st.stop()

    st.session_state.setdefault("chat_history", [])

    # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    question = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å‚Ä¶")

    if question:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.chat_history.append({"text": question, "sender": "user"})

        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å)
        for msg in st.session_state.chat_history:
            render_message(msg["text"], msg["sender"])

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç..."
        placeholder = st.empty()
        placeholder.markdown(
            """
            <style>
            @keyframes blink {
                0%   { opacity: 0.2; }
                20%  { opacity: 1; }
                100% { opacity: 0.2; }
            }
            .dot {
                display: inline-block;
                margin-left: 2px;
                animation: blink 1.4s infinite both;
            }
            .dot:nth-child(2) { animation-delay: 0.2s; }
            .dot:nth-child(3) { animation-delay: 0.4s; }
            </style>

            <div style='
                background: var(--background-color);
                color: var(--text-color);
                padding: 10px 14px;
                border-radius: 12px;
                text-align: left;
                margin: 6px 0;
                font-style: italic;
                opacity: 0.85;
                box-shadow: 0 1px 3px rgba(0,0,0,0.15);
            '>
                ü§ñ –ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span>
            </div>
            """,
            unsafe_allow_html=True,
        )


        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò (—ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è)
        answer = continue_chat(question)

        # –ó–∞–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç
        placeholder.empty()
        st.session_state.chat_history.append({"text": answer, "sender": "ai"})
        render_message(answer, "ai")

    else:
        # –ï—Å–ª–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é
        for msg in st.session_state.chat_history:
            render_message(msg["text"], msg["sender"])



# === –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
elif st.session_state['page'] == "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
    st.title("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ClaryData")
    
    try:
        with open("README.md", "r", encoding="utf-8") as f:
            content = f.read()
        st.markdown(content)
    except FileNotFoundError:
        st.warning("–§–∞–π–ª README.md –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.")


# === –§—É—Ç–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–≤—Ç–æ—Ä) ===
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É –ª–µ–≤–æ, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
st.markdown("""
    <style>
        .bottom-right {
            position: fixed;
            right: 15px;
            bottom: 10px;
            font-size: 0.75em;
            color: #333333;
            z-index: 9999;
        }
    </style>
    <div class="bottom-right">¬© Created by Rahimov M.A. TTU 2025</div>
""", unsafe_allow_html=True)