# –ú–æ–¥—É–ª–∏
import streamlit as st
import pandas as pd
import os
import time
import plotly.express as px
import joblib
import io
from sklearn.model_selection import train_test_split


from Utils.upload_utils import load_data, get_base_info, display_preview, display_base_info, interpret_with_ai
from Utils.automatic_data_processing import run_auto_cleaning, summarize_missing, run_auto_cleaning, \
        drop_rows_na, drop_cols_na, fill_na, render_nan_handling_info, render_nan_rules_table, drop_selected_cols, show_na_summary

from Utils.outlier_utils import render_outlier_handling_info, detect_outliers_iqr, detect_outliers_zscore, \
    plot_outliers_distribution, outliers_summary, run_auto_outlier_removal, render_outlier_rules_table, \
    remove_outliers_iqr, remove_outliers_zscore, cap_outliers, remove_outliers_percentile, plot_outlier_removal_comparison

from Utils.visualization import plot_data_visualizations, suggest_visualization_combinations, plot_correlation_heatmap, generate_pivot_table

from Utils.stats_tests import *

from Utils.modeling_utils import *

from Utils.chat import render_message, reset_chat_history

from AI_helper import (
    get_chatgpt_response, update_context, send_correlation_to_ai, send_pivot_to_ai, chat_only, notify_ai_dataset_structure, reset_ai_conversation
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")


# === –ó–∞—Å—Ç–∞–≤–∫–∞ ===
if "app_loaded" not in st.session_state:
    st.markdown("""
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                width: 100%;
                font-family: 'Inter', sans-serif;
                overflow: hidden;
            }

            .splash-container {
                position: fixed;
                top: 0; left: 0;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
                color: #0f172a;
                z-index: 9999;
                animation: fadeIn 1s ease-in-out;
                transition: opacity 1s ease-out;
            }

            .splash-container.fade-out {
                opacity: 0;
                pointer-events: none;
            }

            .ai-emoji {
                font-size: 3.2em;
                margin-bottom: 20px;
                animation: pulse 2s infinite;
            }

            .splash-title {
                font-size: 2.4em;
                font-weight: 700;
                text-align: center;
                opacity: 0;
                animation: fadeUp 1.2s ease-out forwards;
                animation-delay: 0.4s;
            }

            .splash-subtext {
                font-size: 1em;
                margin-top: 12px;
                color: #475569;
                opacity: 0;
                animation: fadeUp 1.4s ease-out forwards;
                animation-delay: 0.8s;
                text-align: center;
                max-width: 600px;
                padding: 0 16px;
            }

            .splash-footer {
                position: absolute;
                bottom: 18px;
                font-size: 0.8em;
                color: #64748b;
                text-align: center;
            }

            @keyframes fadeUp {
                0% { opacity: 0; transform: translateY(20px); }
                100% { opacity: 1; transform: translateY(0); }
            }

            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }

            @keyframes pulse {
                0%, 100% {
                    transform: scale(1);
                    opacity: 1;
                }
                50% {
                    transform: scale(1.15);
                    opacity: 0.75;
                }
            }
        </style>

        <div class="splash-container" id="splash">
            <div class="ai-emoji">‚ú®</div>
            <div class="splash-title">ClariData</div>
            <div class="splash-subtext">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö<br>—Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏</div>
            <div class="splash-footer">¬© Created by Rahimov M.A.</div>
        </div>

        <script>
            setTimeout(() => {
                const splash = document.getElementById("splash");
                if (splash) splash.classList.add("fade-out");
            }, 3000);
        </script>
    """, unsafe_allow_html=True)

    time.sleep(3)
    st.session_state.app_loaded = True
    st.rerun()


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å ---
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

if "_ai_session_inited" not in st.session_state:
    reset_ai_conversation()                 # —Å–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    st.session_state["_ai_session_inited"] = True

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
if 'page' not in st.session_state:
    st.session_state['page'] = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'

st.markdown("""
    <style>
        /* –ö–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä –æ—Ç–∫—Ä—ã—Ç (aria-expanded="true"), –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–º–µ—â–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ */
        [data-testid="stSidebar"][aria-expanded="true"] ~ .main .block-container {
            margin-left: 300px;
            transition: margin-left 0.3s ease;
        }
        /* –ö–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä —Å–≤–µ—Ä–Ω—É—Ç (aria-expanded="false"), –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ */
        [data-testid="stSidebar"][aria-expanded="false"] ~ .main .block-container {
            margin-left: 1rem;
            transition: margin-left 0.3s ease;
        }
    </style>
""", unsafe_allow_html=True)

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def set_page(page_name):
    st.session_state['page'] = page_name

# --- –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–æ–∫ ---
st.sidebar.header("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
pages = {
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üì•",
    "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "‚öôÔ∏è",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤": "üö©",
    "–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ (EDA)": "üìä",
    "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã": "üìâ",
    "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ": "üìü",
    "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)": "üí¨",
    "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": "üìù"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
st.markdown("""
    <style>
        div.stButton > button {
            background-color: #f0f2f6;
            color: black;
            border: 1px solid #ccc;
            border-radius: 6px;
        }
        div.stButton > button:hover {
            background-color: #e0f0ff;
            color: #007BFF;
            border: 1px solid #007BFF;
        }
    </style>
""", unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for name, icon in pages.items():
    st.sidebar.button(f"{icon} {name}", on_click=set_page, args=(name,))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()


# ===================== –°–¢–†–ê–ù–ò–¶–´ =======================
# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state['page'] == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.caption('üí°–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å ClaryData, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"!')
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    if "df" not in st.session_state:
        uploaded_file = st.file_uploader("", type=["csv", "xlsx", "xls"])
        if not uploaded_file:
            st.info("‚¨Ü –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", icon="üìÅ")
        else:
            try:
                df = load_data(uploaded_file)
                st.session_state["df"] = df
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", icon="‚úÖ")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", icon="üö´")
    else:
        df = st.session_state["df"]
        st.success("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")

    # --- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ---
    if "df" in st.session_state:
        st.markdown("---")

        # –ü—Ä–µ–≤—å—é –∏ –º–µ—Ç—Ä–∏–∫–∏
        display_preview(df)
        base_info = get_base_info(df)
        display_base_info(base_info)

        # ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ summary (–±–µ–∑–æ–ø–∞—Å–Ω–æ) ‚Äî
        data_sig = (tuple(df.columns), df.shape)
        if st.session_state.get("_data_sig") != data_sig:
            # –¥–∞—Ç–∞—Å–µ—Ç –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º summary
            summary = f"{df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤; –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(map(str, df.columns))}"
            st.session_state["_data_sig"] = data_sig
            st.session_state["data_summary"] = summary
            try:
                update_context("data_summary", summary)
            except Exception:
                pass
        else:
            # –¥–∞—Ç–∞—Å–µ—Ç —Ç–æ—Ç –∂–µ ‚Äî –±–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ –ª–µ—Ç—É
            summary = st.session_state.get(
                "data_summary",
                f"{df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤; –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(map(str, df.columns))}"
            )

        st.markdown("---")

        st.markdown("### –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–ò")
        st.caption("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –ò–ò –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏–∑—É, –ø–æ–ª—É—á–∞—è –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

        if st.button("ü§ñ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ò–ò –∫ –∞–Ω–∞–ª–∏–∑—É"):
            with st.spinner("–ü–æ–¥–∫–ª—é—á–∞–µ–º –ò–ò –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö..."):
                msg = notify_ai_dataset_structure(df)
            st.success(msg)


        st.markdown("---")

        # –ü–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
        user_desc = st.text_area(
            "üìù –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞, —á—Ç–æ–±—ã –ò–ò –º–æ–≥ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–º–æ—â—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è —Ü–µ–Ω—ã –Ω–∞ –∂–∏–ª—å—ë –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
            value=st.session_state.get("analysis_goal", ""),
            height=100
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        if st.button("‚ú® –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç AI"):
            if not user_desc.strip():
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞.")
            else:
                st.session_state["analysis_goal"] = user_desc
                ai_response = interpret_with_ai(
                    data_summary=summary,  # <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é summary
                    user_desc=user_desc,
                    df=df,
                    get_ai_fn=get_chatgpt_response
                )
                st.session_state["ai_interpretation"] = ai_response



# === –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state.get("page") == "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("‚öôÔ∏è –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "data_changed" not in st.session_state:
        st.session_state["data_changed"] = False

    if "df" not in st.session_state:
        st.warning("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]

        # ‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        render_nan_handling_info()

        # üéØ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        target = st.selectbox(
            "–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–µ–µ NaN –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)",
            [None] + list(df.columns)
        )

        st.markdown("---")

        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        st.subheader("üìä –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
        missing = summarize_missing(df)

        if missing.empty:
            st.success("–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö", icon="‚úÖ")
        else:
            st.table(
                missing
                .rename(columns={
                    "column": "–°—Ç–æ–ª–±–µ—Ü",
                    "missing_count": "–ö–æ–ª-–≤–æ",
                    "pct_missing": "% –ø—Ä–æ–ø—É—Å–∫–æ–≤"
                })
                .set_index("–°—Ç–æ–ª–±–µ—Ü")
            )

            st.markdown("---")

            # ü§ñ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
            st.subheader("ü§ñ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞")
            with st.expander("üìå –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏"):
                render_nan_rules_table()

            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É"):
                before, log, new_df = run_auto_cleaning(df, target_col=target)
                st.session_state["df"] = new_df
                st.session_state["data_changed"] = True  # <-- –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

                if before.empty:
                    st.info("–ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", icon="‚úÖ")
                else:
                    st.markdown("**–î–æ –æ—á–∏—Å—Ç–∫–∏**")
                    st.table(
                        before
                        .rename(columns={
                            "column": "–°—Ç–æ–ª–±–µ—Ü",
                            "missing_count": "–ö–æ–ª-–≤–æ",
                            "pct_missing": "% –ø—Ä–æ–ø—É—Å–∫–æ–≤"
                        })
                        .set_index("–°—Ç–æ–ª–±–µ—Ü")
                    )

                    with st.spinner("–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞..."):
                        time.sleep(1)

                    report = (
                        pd.DataFrame(log)
                        .rename(columns={
                            "column": "–°—Ç–æ–ª–±–µ—Ü",
                            "missing_count": "–ö–æ–ª-–≤–æ",
                            "pct_missing": "% –ø—Ä–æ–ø—É—Å–∫–æ–≤",
                            "action": "–î–µ–π—Å—Ç–≤–∏–µ"
                        })
                        .set_index("–°—Ç–æ–ª–±–µ—Ü")
                    )
                    st.markdown("**–û—Ç—á–µ—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏**")
                    st.table(report)

                    remaining = new_df.isna().sum().sum()
                    st.success(f"–ì–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å–∫–æ–≤: {remaining}")

        st.markdown("---")

        # üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        st.subheader("üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
        with st.expander("‚úçÔ∏è –ü–∞–Ω–µ–ª—å —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"):
            cols = st.multiselect(
                "–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                [c for c in df.columns if c != target]
            )
            action = st.radio(
                "–î–µ–π—Å—Ç–≤–∏–µ:",
                ["–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏", "–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã (—Å NaN)", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã"]
            )
            show_tables = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ NaN", value=True)

            method = value = None
            if action == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN":
                method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:", ["mean", "median", "mode", "constant"])
                if method == "constant":
                    value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:")

            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                before = df.copy()

                if action == "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏":
                    new_df = drop_rows_na(df, cols, target)
                elif action == "–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã (—Å NaN)":
                    new_df = drop_cols_na(df, cols)
                elif action == "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã":
                    new_df = drop_selected_cols(df, cols)
                elif action == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN":
                    new_df = fill_na(df, cols, method, value)

                st.session_state["df"] = new_df
                st.session_state["data_changed"] = True  # <-- –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                if show_tables and action != "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã":
                    show_na_summary(before, new_df, cols)
                elif show_tables and action == "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã":
                    st.markdown("**–†–∞–∑–º–µ—Ä –¥–æ/–ø–æ—Å–ª–µ (—Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã)**")
                    col1, col2 = st.columns(2)
                    col1.write(before.shape)
                    col2.write(new_df.shape)

        # === üì• –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ===
        if st.session_state.get("data_changed", False) and not st.session_state["df"].empty:
            st.markdown("---")
            st.subheader("üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            base_name = "data"
            if "original_filename" in st.session_state:
                base_name = os.path.splitext(st.session_state["original_filename"])[0]

            file_name = f"{base_name}_cleaned.csv"

            # –ì–æ—Ç–æ–≤–∏–º CSV –≤ –±—É—Ñ–µ—Ä–µ
            csv_buffer = io.BytesIO()
            st.session_state["df"].to_csv(csv_buffer, index=False)
            csv_buffer.seek(0)  # <-- –í–ê–ñ–ù–û: —Å–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ

            st.success("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
            st.download_button(
                label=f"üíæ –°–∫–∞—á–∞—Ç—å {file_name}",
                data=csv_buffer,
                file_name=file_name,
                mime="text/csv"
            )




# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ ===
if st.session_state.get("page") == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤":
    st.title("üö© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "data_changed" not in st.session_state:
        st.session_state["data_changed"] = False

    if "df" not in st.session_state:
        st.warning("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]
        numeric_cols = df.select_dtypes(include="number").columns.tolist()

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        render_outlier_handling_info()
        st.markdown("---")

        # –ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤"):
            cols_viz = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                numeric_cols,
                key="out_viz_cols"
            )
            method_viz = st.radio(
                "–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤",
                ["IQR-–º–µ—Ç–æ–¥", "Z-score"],
                key="out_viz_method"
            )

            if method_viz == "IQR-–º–µ—Ç–æ–¥":
                q_low, q_high = st.slider(
                    "–ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è IQR",
                    0.0, 0.5, (0.25, 0.75),
                    step=0.05,
                    key="iqr_viz"
                )
            else:
                z_thresh = st.number_input(
                    "–ü–æ—Ä–æ–≥ Z-score",
                    min_value=1.0, max_value=5.0,
                    value=3.0, step=0.1,
                    key="z_viz"
                )

            if st.button("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã", key="show_out_viz"):
                masks = (detect_outliers_iqr(df, cols_viz, q_low, q_high)
                         if method_viz == "IQR-–º–µ—Ç–æ–¥"
                         else detect_outliers_zscore(df, cols_viz, z_thresh))
                fig = plot_outliers_distribution(df, masks, cols_viz)
                st.plotly_chart(fig, use_container_width=True)

                summary = outliers_summary(df, masks)
                st.table(summary.set_index("column"))

        st.markdown("---")

        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
        st.subheader("ü§ñ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("üìå –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤"):
            render_outlier_rules_table()

        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –≤—ã–±—Ä–æ—Å–æ–≤", key="auto_out"):
            before, log, cleaned_df = run_auto_outlier_removal(df)
            st.session_state["df"] = cleaned_df

            total_removed = sum(item["removed_count"] for item in log)
            if total_removed == 0:
                st.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", icon="‚úÖ")
            else:
                report = (
                    pd.DataFrame(log)
                      .rename(columns={
                          "column": "–°—Ç–æ–ª–±–µ—Ü",
                          "method": "–ú–µ—Ç–æ–¥",
                          "removed_count": "–£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤"
                      })
                      .set_index("–°—Ç–æ–ª–±–µ—Ü")
                )
                st.markdown("**–û—Ç—á–µ—Ç –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤**")
                st.table(report)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {total_removed}")

                st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–æ –∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏")
                fig_cmp = plot_outlier_removal_comparison(df, cleaned_df, numeric_cols)
                st.plotly_chart(fig_cmp, use_container_width=True)

        st.markdown("---")

        st.subheader("üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("‚úçÔ∏è –ü–∞–Ω–µ–ª—å —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                cols_manual = st.multiselect(
                    "–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    numeric_cols,
                    key="out_manual_cols"
                )
            with col2:
                method_manual = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    [
                        "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)",
                        "–ö–∞–ø–ø–∏–Ω–≥ (IQR-–≥—Ä–∞–Ω–∏—Ü—ã)",
                        "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Z-score",
                        "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º"
                    ],
                    key="out_manual_method"
                )

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
            if method_manual in ("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)", "–ö–∞–ø–ø–∏–Ω–≥ (IQR-–≥—Ä–∞–Ω–∏—Ü—ã)"):
                low_q, high_q = st.slider(
                    "–ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è IQR",
                    0.0, 0.5, (0.25, 0.75),
                    step=0.05,
                    key="iqr_manual"
                )
            elif method_manual == "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Z-score":
                z_manual = st.number_input(
                    "–ü–æ—Ä–æ–≥ Z-score",
                    min_value=1.0, max_value=5.0,
                    value=3.0, step=0.1,
                    key="z_manual"
                )
            else:  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º
                p_low, p_high = st.slider(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    0, 100, (5, 95),
                    step=1,
                    key="percentile_manual"
                )

            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∫—É"):
                before_manual = df.copy()
                cleaned_manual = df.copy()

                for col in cols_manual:
                    if method_manual == "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)":
                        cleaned_manual = remove_outliers_iqr(cleaned_manual, [col], low_q, high_q)
                    elif method_manual == "–ö–∞–ø–ø–∏–Ω–≥ (IQR-–≥—Ä–∞–Ω–∏—Ü—ã)":
                        cleaned_manual = cap_outliers(cleaned_manual, [col], low_q, high_q)
                    elif method_manual == "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Z-score":
                        cleaned_manual = remove_outliers_zscore(cleaned_manual, [col], z_manual)
                    else:
                        cleaned_manual = remove_outliers_percentile(cleaned_manual, [col], p_low, p_high)

                st.session_state["df"] = cleaned_manual
                st.success("‚úÖ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                # show_outlier_summary(before_manual, cleaned_manual, cols_manual)

                st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–æ –∏ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
                fig_cmp_manual = plot_outlier_removal_comparison(
                    before_manual, cleaned_manual, cols_manual
                )
                st.plotly_chart(fig_cmp_manual, use_container_width=True)

        # === üì• –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ===
        if st.session_state.get("data_changed", False) and not st.session_state["df"].empty:
            st.markdown("---")
            st.subheader("üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            base_name = "data"
            if "original_filename" in st.session_state:
                base_name = os.path.splitext(st.session_state["original_filename"])[0]
            file_name = f"{base_name}_cleaned.csv"

            csv_buffer = io.BytesIO()
            st.session_state["df"].to_csv(csv_buffer, index=False)
            csv_buffer.seek(0)

            st.success("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
            st.download_button(
                label=f"üíæ –°–∫–∞—á–∞—Ç—å {file_name}",
                data=csv_buffer,
                file_name=file_name,
                mime="text/csv"
            )



# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ EDA ===
elif st.session_state["page"] == "–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ (EDA)":
    st.title("üìä –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (EDA)")

    if "df" not in st.session_state:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", icon="‚ö†Ô∏è")
    else:
        df = st.session_state["df"]
        st.markdown("---")

        # === üîñ –í–∫–ª–∞–¥–∫–∏ ===
        tabs = st.tabs(["üìà –ì—Ä–∞—Ñ–∏–∫–∏", "‚ùÑÔ∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", "üìä –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"])

        # === üìà –í–∫–ª–∞–¥–∫–∞: –ì—Ä–∞—Ñ–∏–∫–∏ ===
        with tabs[0]:
            st.subheader("üß≠ –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
            st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Å—è–º X –∏ Y")

            x = st.selectbox(
                "üü• –û—Å—å X",
                df.columns,
                index=st.session_state.get("eda_x_index", 0),
                key="eda_x"
            )
            y_options = [""] + list(df.columns)
            y = st.selectbox(
                "üü¶ –û—Å—å Y (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                y_options,
                index=st.session_state.get("eda_y_index", 0),
                key="eda_y"
            ) or None

            st.session_state["eda_x_index"] = list(df.columns).index(x)
            st.session_state["eda_y_index"] = y_options.index(y if y else "")

            if x == y and y is not None:
                st.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ X –∏ Y –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.")
                y = None

            # === –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            build_chart = False
            if x:
                build_chart = st.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", key="build_chart")
                st.info("üìâ –ì—Ä–∞—Ñ–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.")
            else:
                st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ X.")

            st.markdown("---")

            # === AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏
            with st.expander("üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç –ò–ò –ø–æ X –∏ Y"):
                if st.button("‚ú® –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏", key="suggest_combinations"):
                    df_info = f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(df.columns)}"
                    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
                        time.sleep(2)
                        suggestion = suggest_visualization_combinations(df_info)
                    st.markdown("**üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:**")
                    st.info(suggestion, icon="ü§ñ")

            st.markdown("---")

            # === –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
            st.subheader("üé® –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞")
            chart_options = [
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
                "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "Boxplot", "Bar-–≥—Ä–∞—Ñ–∏–∫", "–õ–∞–π–Ω–ø–ª–æ—Ç"
            ]
            chart_type = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫",
                chart_options,
                index=st.session_state.get("eda_chart_index", 0),
                key="eda_chart"
            )
            st.session_state["eda_chart_index"] = chart_options.index(chart_type)

            st.markdown("---")

            # === –§–∏–ª—å—Ç—Ä—ã
            with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ —á–∏—Å–ª–æ–≤—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º"):
                filters = {}
                cols_to_filter = [x] + ([y] if y else [])
                for col in dict.fromkeys(cols_to_filter):
                    if pd.api.types.is_numeric_dtype(df[col]):
                        lo, hi = float(df[col].min()), float(df[col].max())
                        if lo == hi:
                            st.info(f"‚ö†Ô∏è –î–ª—è ¬´{col}¬ª —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω: –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã ({lo})")
                            continue
                        sel = st.slider(
                            f"–§–∏–ª—å—Ç—Ä –ø–æ {col}",
                            min_value=lo,
                            max_value=hi,
                            value=st.session_state.get(f"slider_{col}", (lo, hi)),
                            key=f"slider_{col}"
                        )
                        filters[col] = sel

            with st.expander("üìå –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ top-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
                top_n = None
                limit_topn = st.checkbox(
                    "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å top-N",
                    value=st.session_state.get("limit_topn", False),
                    key="limit_topn"
                )
                if limit_topn:
                    top_n = st.slider(
                        "N –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                        3, 30,
                        st.session_state.get("top_n_slider", 10),
                        key="top_n_slider"
                    )

            st.markdown("---")
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫")

            if build_chart:
                with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞..."):
                    time.sleep(2.5)
                    fig = plot_data_visualizations(
                        df=df,
                        x=x,
                        y=y,
                        top_n=top_n,
                        numeric_filters=filters,
                        chart_type=chart_type
                    ) 

                if fig:
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("üéØ –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫¬ª.")



        # === ‚ùÑÔ∏è –í–∫–ª–∞–¥–∫–∞: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ===
        with tabs[1]:
            st.subheader("‚ùÑÔ∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
            fig = plot_correlation_heatmap(df)
            if fig:
                st.plotly_chart(fig, use_container_width=True)
                st.info("üí° –ß–µ–º –±–ª–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ 1 –∏–ª–∏ -1, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ª–∏–Ω–µ–π–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.")

                if st.button("üì§ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –ò–ò", key="fix_corr"):
                    _ = send_correlation_to_ai(df)
                    st.session_state["correlation_saved"] = True
                    st.success("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ –ò–ò.")
                elif st.session_state.get("correlation_saved"):
                    st.info("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —É–∂–µ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                st.info("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É.")

        # === üìä –í–∫–ª–∞–¥–∫–∞: –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ===
        with tabs[2]:
            st.subheader("üìä –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (Pivot)")

            col1, col2 = st.columns(2)
            with col1:
                index_col = st.selectbox(
                    "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
                    df.columns,
                    index=st.session_state.get("pivot_index_index", 0),
                    key="pivot_index"
                )
                st.session_state["pivot_index_index"] = list(df.columns).index(index_col)

            with col2:
                num_cols = df.select_dtypes(include='number').columns
                value_col = st.selectbox(
                    "–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å",
                    num_cols,
                    index=st.session_state.get("pivot_value_index", 0),
                    key="pivot_value"
                )
                st.session_state["pivot_value_index"] = list(num_cols).index(value_col)

            agg_options = ["mean", "sum", "count"]
            agg_func = st.radio(
                "–ú–µ—Ç–æ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
                agg_options,
                index=st.session_state.get("pivot_agg_index", 0),
                horizontal=True,
                key="pivot_agg"
            )
            st.session_state["pivot_agg_index"] = agg_options.index(agg_func)

            pivot_table = generate_pivot_table(df, index_col, value_col, agg_func)
            if pivot_table is not None:
                st.dataframe(pivot_table, use_container_width=True)

                if st.button("üì§ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –ò–ò", key="fix_pivot"):
                    _ = send_pivot_to_ai(pivot_table, index_col, value_col, agg_func)
                    st.session_state["pivot_saved"] = True
                    st.success("‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ò–ò.")
                elif st.session_state.get("pivot_saved"):
                    st.info("‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
            else:
                st.info("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Å—Ç–æ–ª–±—Ü—ã!")


# === –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã ===
if st.session_state.get("page") == "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã":
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    st.caption("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑: t‚Äëtest, ANOVA –∏ Chi‚Äësquare")

    # === 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö ===
    if "df" not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        st.stop()

    df = st.session_state.df

    # === 2. –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞ ===
    with st.expander("üß≠ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç?", expanded=False):
        st.markdown("""
        - **t‚Äëtest** ‚Äî 2 –≥—Ä—É–ø–ø—ã, —á–∏—Å–ª–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Üí —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö  
        - **ANOVA** ‚Äî 3+ –≥—Ä—É–ø–ø, —á–∏—Å–ª–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Üí —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö  
        - **Chi‚Äësquare** ‚Äî 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        """)

    # === 3. –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ ===
    selected_test = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç",
        ["t-test", "ANOVA", "Chi-squared"],
        key="stats_test_choice"
    )

    st.markdown("---")  # üîπ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≤—ã–±–æ—Ä–æ–º —Ç–µ—Å—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

    # ===== T‚ÄëTEST =====
    if selected_test == "t-test":
        # --- –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
        num_cols = df.select_dtypes(include=["number"]).columns.tolist()
        cat_cols_all = df.select_dtypes(exclude=["number"]).columns.tolist()

        if not num_cols:
            st.info("‚ÑπÔ∏è –ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è t‚Äëtest.")
            st.stop()
        if not cat_cols_all:
            st.info("‚ÑπÔ∏è –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è t‚Äëtest.")
            st.stop()

        target_col = st.selectbox("–ß–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ (–º–µ—Ç—Ä–∏–∫–∞)", num_cols, key="ttest_num")
        group_col = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", cat_cols_all, key="ttest_group")

        levels = df[group_col].dropna().unique().tolist()
        if len(levels) == 2:
            st.caption(f"–ì—Ä—É–ø–ø—ã: {levels[0]!r} –∏ {levels[1]!r}")
            paired = st.checkbox("–ü–∞—Ä–Ω—ã–π t‚Äëtest (paired)", value=False, key="ttest_paired")
        else:
            picked_levels = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –î–í–ê —É—Ä–æ–≤–Ω—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                options=levels, max_selections=2,
                key="ttest_levels"
            )
            paired = st.checkbox("–ü–∞—Ä–Ω—ã–π t‚Äëtest (paired)", value=False, key="ttest_paired")

        st.markdown("---")  # üîπ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞

        # --- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ---
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å t‚Äëtest", type="primary"):
            if len(levels) == 2:
                run_ttest(df, target_col, group_col, paired)
            elif len(picked_levels) == 2:
                df_pair = df[df[group_col].isin(picked_levels)].copy()
                run_ttest(df_pair, target_col, group_col, paired)
            else:
                st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    # ===== ANOVA =====
    elif selected_test == "ANOVA":
        # --- –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
        num_cols = df.select_dtypes(include=["number"]).columns.tolist()
        cat_cols = df.select_dtypes(exclude=["number"]).columns.tolist()

        if not num_cols:
            st.info("‚ÑπÔ∏è –ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ANOVA.")
            st.stop()
        if not cat_cols:
            st.info("‚ÑπÔ∏è –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ANOVA.")
            st.stop()

        target_col = st.selectbox("–ß–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ (–º–µ—Ç—Ä–∏–∫–∞)", num_cols, key="anova_num")
        group_col = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ (3+ –≥—Ä—É–ø–ø—ã)", cat_cols, key="anova_group")

        st.markdown("---")  # üîπ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞

        # --- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ---
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å ANOVA", type="primary"):
            run_anova(df, target_col, group_col)

    # ===== CHI‚ÄëSQUARED =====
    else:
        # --- –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
        cat_cols = df.select_dtypes(exclude=["number"]).columns.tolist()
        if len(cat_cols) < 2:
            st.info("‚ÑπÔ∏è –î–ª—è Chi‚Äësquare –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞.")
            st.stop()

        col1 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ ‚Ññ1", cat_cols, key="chi_col1")
        other_cats = [c for c in cat_cols if c != col1] or cat_cols
        col2 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ ‚Ññ2", other_cats, key="chi_col2")

        plot_choice = st.radio(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            ["–ê–≤—Ç–æ", "Heatmap", "Stacked bar", "Clustered bar"],
            horizontal=True, key="chi_plot"
        )

        st.markdown("---")  # üîπ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞

        # --- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ---
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å Chi‚Äësquare", type="primary"):
            if col1 == col2:
                st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.")
            else:
                run_chi2(df, col1, col2, plot_choice)



# === –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
if st.session_state.get("page") == "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.title("ü§ñ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    st.caption("–§–æ–∫—É—Å: –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –∏ –ø–æ—á–µ–º—É –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")

    if "df" not in st.session_state:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        st.stop()

    df: pd.DataFrame = st.session_state["df"]

    # ====== –õ–∏–ø–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ======
    ms = ensure_modeling_state(df)

    # ====== –õ–∏–ø–∫–∏–π –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π ======
    options = list(df.columns)
    target_col, target_changed = sticky_selectbox(
        ns="modeling_state",          # –Ω–µ–π–º—Å–ø–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        key="target",                 # –∫–ª—é—á –≤–Ω—É—Ç—Ä–∏ –Ω–µ–π–º—Å–ø–µ–π—Å–∞
        label="üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (binary target)",
        options=options,
        ui_key="modeling_target_ui"   # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á UI
    )

    unique_target = pd.Series(df[target_col].dropna().unique())
    if len(unique_target) > 2:
        st.error(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–π (–Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(unique_target)})")
        st.stop()

    feature_cols = [c for c in df.columns if c != target_col]
    if not feature_cols:
        st.error("–ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–≤—Å–µ –ø–æ–ª—è ‚Äî —ç—Ç–æ Target).")
        st.stop()

    # ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ ======
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    c1, c2 = st.columns(2)
    with c1:
        C_value = st.number_input("–ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ C", 0.01, 100.0, 1.0, 0.01)
        penalty = st.selectbox("–¢–∏–ø —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏", ["l1", "l2"], index=1)
        use_class_weight = st.checkbox("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å–∞ –∫–ª–∞—Å—Å–æ–≤", value=False)
    with c2:
        threshold = st.slider("–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", 0.05, 0.95, 0.5, 0.05)
        test_size = st.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ (%)", 10, 50, 20, 5) / 100
        max_iter = st.number_input("–ú–∞–∫—Å. –∏—Ç–µ—Ä–∞—Ü–∏–π", 100, 5000, 1000, 100)

    # ====== –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ======
    if st.button("üöÄ –û–±—É—á–∏—Ç—å / –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", use_container_width=True):
        try:
            X, y_encoded, le, num_cols, cat_cols = prepare_features_and_target(df, target_col)
            X_train, X_test, y_train, y_test = train_test_split(
                X, y_encoded, test_size=test_size, random_state=42, stratify=y_encoded
            )
            class_weight = "balanced" if use_class_weight else None
            model, meta = train_logistic_regression(
                X_train, y_train, C=C_value, penalty=penalty,
                class_weight=class_weight, max_iter=max_iter,
                label_encoder=le
            )

            metrics, roc_data, pr_data = evaluate_model(model, X_test, y_test, meta, threshold)
            importance_df = compute_feature_importance(model, meta)
            short_text = interpret_feature_importance(importance_df, top_n=3)

            st.session_state["modeling"] = {
                "model": model, "meta": meta,
                "threshold": threshold, "metrics": metrics,
                "roc": roc_data, "pr": pr_data,
                "importance_df": importance_df, "short_text": short_text,
                "target_col": target_col, "feature_cols": feature_cols,
                "params": {
                    "C": C_value, "penalty": penalty,
                    "class_weight": class_weight, "max_iter": max_iter,
                    "test_size": test_size
                }
            }

            # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ dirty ‚Äî –º–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–∞—Ä–≥–µ—Ç—É
            mark_model_trained()

            st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")

    # ====== –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å ======
    if "modeling" in st.session_state:
        data = st.session_state["modeling"]

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫—Ä–∏–≤—ã–µ", expanded=False):
            m_df = pd.DataFrame({
                "–ú–µ—Ç—Ä–∏–∫–∞": list(data["metrics"].keys()),
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [round(v, 4) for v in data["metrics"].values()]
            })
            st.dataframe(m_df, use_container_width=True, hide_index=True)
            fpr, tpr = data["roc"]
            precision, recall = data["pr"]
            c1, c2 = st.columns(2)
            with c1:
                st.plotly_chart(make_roc_fig(fpr, tpr), use_container_width=True)
            with c2:
                st.plotly_chart(make_pr_fig(precision, recall), use_container_width=True)

        st.subheader("üìå –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        st.plotly_chart(plot_feature_importance(data["importance_df"]), use_container_width=True)
        st.info(data["short_text"])

        # üîç –ü—Ä–æ–≥–Ω–æ–∑
        st.subheader("üîç –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")
        num_cols, cat_cols = split_features_by_type(df, data["feature_cols"])

        # UI: —Å—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π
        user_input = {}
        cols = st.columns(3) if len(data["feature_cols"]) >= 9 else (st.columns(2) if len(data["feature_cols"]) >= 4 else st.columns(1))

        # –ü–æ—Ä—è–¥–æ–∫: —á–∏—Å–ª–æ–≤—ã–µ, –∑–∞—Ç–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ
        all_feats = num_cols + cat_cols

        for i, feat in enumerate(all_feats):
            with cols[i % len(cols)]:
                series = df[feat]
                if pd.api.types.is_numeric_dtype(series):
                    vmin = float(series.min())
                    vmax = float(series.max())
                    vdefault = float(series.median())
                    user_input[feat] = st.number_input(
                        f"{feat}",
                        min_value=vmin if np.isfinite(vmin) else None,
                        max_value=vmax if np.isfinite(vmax) else None,
                        value=vdefault if np.isfinite(vdefault) else 0.0
                    )
                else:
                    options = pd.Series(series.dropna().unique()).astype(str).tolist()
                    options = sorted(options)[:300]  # safety
                    if not options:
                        options = ["(–ø—É—Å—Ç–æ)"]
                    user_input[feat] = st.selectbox(f"{feat}", options, index=0)

        if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
            X_input_df, errors = validate_and_prepare_single_input(df, data["feature_cols"], user_input)
            if errors:
                for k, msg in errors.items():
                    st.warning(f"{k}: {msg}")
            else:
                try:
                    result = predict_with_explanation(
                        model=data["model"],
                        meta=data["meta"],
                        X_input_df=X_input_df,
                        threshold=data["threshold"],
                        top_k=3
                    )
                    st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {result['pred_class']} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {result['proba']:.2f})")
                    st.write(result["explanation"])
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑: {e}")

        # ======================
        # –≠–∫—Å–ø–æ—Ä—Ç
        # ======================

        st.markdown("---")

        st.subheader("üì¶ –≠–∫—Å–ø–æ—Ä—Ç")
        cdl1, cdl2, cdl3, cdl4 = st.columns(4)

        with cdl1:
            try:
                model_bytes = serialize_model(data["model"])
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å (.pkl)",
                    data=model_bytes,
                    file_name="logreg_model.pkl",
                    mime="application/octet-stream",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏: {e}")

        with cdl2:
            imp_csv = data["importance_df"].to_csv(index=False).encode("utf-8")
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (CSV)",
                data=imp_csv,
                file_name="feature_importance.csv",
                mime="text/csv",
                use_container_width=True
            )

        with cdl3:
            metrics_df = pd.DataFrame([data["metrics"]])
            metr_csv = metrics_df.to_csv(index=False).encode("utf-8")
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ (CSV)",
                data=metr_csv,
                file_name="metrics.csv",
                mime="text/csv",
                use_container_width=True
            )

        with cdl4:
            md = generate_markdown_report(
                target_col=data["target_col"],
                metrics=data["metrics"],
                importance_df=data["importance_df"],
                threshold=data["threshold"],
                model_params=data["params"],
                top_n=10
            )
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (MD)",
                data=md.encode("utf-8"),
                file_name="model_report.md",
                mime="text/markdown",
                use_container_width=True
            )


# === –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò) ===
if st.session_state.get("page") == "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)":
    st.title("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö?")
    st.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        reset_chat_history()
        st.success("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")
        st.stop()  # —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —á–∞—Ç

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    st.session_state.setdefault("chat_history", [])

    # –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg in st.session_state.chat_history:
        render_message(msg["text"], msg["sender"])

    # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    question = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å‚Ä¶")

    if question:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.chat_history.append({"text": question, "sender": "user"})
        render_message(question, "user")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        with st.spinner("–ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç‚Ä¶"):
            answer = chat_only(question)

        st.session_state.chat_history.append({"text": answer, "sender": "ai"})
        render_message(answer, "ai")


# === –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
elif st.session_state['page'] == "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
    st.title("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ClaryData")
    
    try:
        with open("README.md", "r", encoding="utf-8") as f:
            content = f.read()
        st.markdown(content)
    except FileNotFoundError:
        st.warning("–§–∞–π–ª README.md –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.")


# === –§—É—Ç–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–≤—Ç–æ—Ä) ===
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É –ª–µ–≤–æ, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
st.markdown("""
    <style>
        .bottom-right {
            position: fixed;
            right: 15px;
            bottom: 10px;
            font-size: 0.75em;
            color: #333333;
            z-index: 9999;
        }
    </style>
    <div class="bottom-right">¬© Created by Rahimov M.A. TTU 2025</div>
""", unsafe_allow_html=True)